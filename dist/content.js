(()=>{console.log("ðŸŽ¤ Email Transcription Extension: Content script loaded!"),console.log("ðŸŽ¤ Creating GmailEmailRecorder instance...");const e=new class{constructor(){console.log("ðŸŽ¤ Initializing GmailEmailRecorder..."),this.recording=!1,this.mediaRecorder=null,this.stream=null,this.chunks=[],this.recordingPopup=null,this.customizationPopup=null,this.currentComposeView=null,this.provider="groq",this.apiKey=null,"loading"===document.readyState?(console.log("ðŸŽ¤ Waiting for DOM to load..."),document.addEventListener("DOMContentLoaded",(()=>this.init()))):(console.log("ðŸŽ¤ DOM already loaded, initializing..."),this.init())}async init(){console.log("ðŸŽ¤ Gmail extension initialized!"),await this.loadSettings(),setTimeout((()=>{this.waitForGmail()}),2e3)}async loadSettings(){return new Promise((e=>{chrome.storage.local.get(["selectedProvider","groqApiKey","openaiApiKey"],(o=>{console.log("ðŸŽ¤ Raw storage result:",o),this.provider=o.selectedProvider||"groq","groq"===this.provider&&o.groqApiKey?(this.apiKey=o.groqApiKey,console.log("ðŸŽ¤ Loaded Groq API key:",this.apiKey?"Set":"Not set")):"openai"===this.provider&&o.openaiApiKey?(this.apiKey=o.openaiApiKey,console.log("ðŸŽ¤ Loaded OpenAI API key:",this.apiKey?"Set":"Not set")):(this.apiKey=null,console.log("ðŸŽ¤ No API key found for provider:",this.provider)),console.log("ðŸŽ¤ Final settings - Provider:",this.provider,"API Key:",this.apiKey?"Available":"Missing"),e()}))}))}waitForGmail(){console.log("ðŸŽ¤ Starting to look for Gmail compose windows...");const e=()=>{let e=!1;['[role="dialog"]',".nH .no",".AD",'[gh="cm"]'].forEach((o=>{document.querySelectorAll(o).forEach((o=>{this.isComposeWindow(o)&&!o.querySelector(".voice-transcribe-btn")&&(console.log("ðŸŽ¤ Found compose window!",o),this.addButtonToCompose(o),e=!0)}))})),e||this.addComposeButtonListener()};e(),setInterval(e,2e3);let o=location.href;new MutationObserver((()=>{const t=location.href;t!==o&&(o=t,console.log("ðŸŽ¤ URL changed, checking for compose windows..."),setTimeout(e,1e3))})).observe(document,{subtree:!0,childList:!0})}isComposeWindow(e){return['input[name="to"]','input[name="cc"]','input[name="bcc"]','input[name="subject"]','[name="to"]','[name="subject"]',".aoT",".gO",'[role="textbox"]'].some((o=>e.querySelector(o)))}addComposeButtonListener(){document.querySelectorAll('[role="button"]').forEach((e=>{e.textContent.toLowerCase().includes("compose")&&!e.hasAttribute("data-voice-listener")&&(e.setAttribute("data-voice-listener","true"),e.addEventListener("click",(()=>{console.log("ðŸŽ¤ Compose button clicked, waiting for window..."),setTimeout((()=>{this.waitForGmail()}),1e3)})))}))}addButtonToCompose(e){console.log("ðŸŽ¤ Attempting to add button to compose window...");const o=['[role="toolbar"]',".gU",".btC",".dC",".aDh",".aoP",".wO",".az9"];let t=null;for(const n of o)if(t=e.querySelector(n),t){console.log("ðŸŽ¤ Found toolbar with selector:",n);break}if(!t){const o=e.querySelector('[data-tooltip*="Send"]')||e.querySelector('[aria-label*="Send"]')||e.querySelector(".T-I.J-J5-Ji.aoO.v7.T-I-atl.L3");o&&(t=o.parentElement,console.log("ðŸŽ¤ Found toolbar via send button"))}if(!t){console.log("ðŸŽ¤ No toolbar found, creating one...");const o=e.querySelector('[contenteditable="true"]')||e.querySelector('[role="textbox"]');o&&(t=document.createElement("div"),t.style.cssText="padding: 10px; border-top: 1px solid #e0e0e0;",o.parentElement.appendChild(t))}if(!t)return void console.log("ðŸŽ¤ Could not find or create toolbar");console.log("ðŸŽ¤ Adding voice button to toolbar...");const n=document.createElement("button");n.className="voice-transcribe-btn",n.innerHTML="Voice (".concat(this.provider.toUpperCase(),")"),n.title="Voice Transcribe Email using ".concat(this.provider.toUpperCase()),n.style.cssText="\n            background: #1a73e8;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 20px;\n            cursor: pointer;\n            margin: 4px;\n            font-size: 13px;\n            font-weight: 500;\n            z-index: 1000;\n            position: relative;\n        ",n.addEventListener("click",(async o=>{if(o.preventDefault(),o.stopPropagation(),console.log("ðŸŽ¤ Voice button clicked!"),console.log("ðŸŽ¤ Reloading settings before recording..."),await this.loadSettings(),!this.apiKey)return console.log("ðŸŽ¤ No API key found after reload"),void this.showMessage("Please set your ".concat(this.provider.toUpperCase()," API key in the extension popup first."));console.log("ðŸŽ¤ API key confirmed, starting recording..."),this.currentComposeView=e,this.recording?this.stopRecording():this.startRecording()})),t.appendChild(n),console.log("ðŸŽ¤ Voice button added successfully!"),this.addFallbackButton(e)}addFallbackButton(e){const o=document.createElement("div");o.innerHTML="MIC",o.title="Voice Transcribe Email using ".concat(this.provider.toUpperCase()),o.style.cssText="\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            width: 50px;\n            height: 40px;\n            background: #1a73e8;\n            color: white;\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 12px;\n            font-weight: bold;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 10000;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n        ",o.addEventListener("click",(async o=>{o.preventDefault(),o.stopPropagation(),console.log("ðŸŽ¤ Floating voice button clicked!"),await this.loadSettings(),this.apiKey?(this.currentComposeView=e,this.recording?this.stopRecording():this.startRecording()):this.showMessage("Please set your ".concat(this.provider.toUpperCase()," API key in the extension popup first."))})),e.style.position="relative",e.appendChild(o),console.log("ðŸŽ¤ Floating voice button added!")}async startRecording(){if(console.log("ðŸŽ¤ Starting recording with API key:",this.apiKey?"Available":"Missing"),this.recording)this.showMessage("Recording is already in progress.");else if(this.apiKey)try{this.stream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,sampleRate:44100}}),this.mediaRecorder=new MediaRecorder(this.stream,{mimeType:"audio/webm;codecs=opus"}),this.mediaRecorder.ondataavailable=e=>this.chunks.push(e.data),this.mediaRecorder.onstop=this.handleRecordingStop.bind(this),this.createRecordingPopup(),this.mediaRecorder.start(),this.recording=!0,console.log("ðŸŽ¤ Recording started successfully!"),this.currentComposeView.querySelectorAll(".voice-transcribe-btn").forEach((e=>{e.innerHTML="Stop",e.style.background="#d93025"}))}catch(e){console.error("ðŸŽ¤ Error starting recording:",e),this.showMessage("Microphone access denied. Please enable microphone permissions.")}else this.showMessage("Please set your ".concat(this.provider.toUpperCase()," API key in the extension popup first."))}createRecordingPopup(){console.log("ðŸŽ¤ Creating recording popup...");const e=document.createElement("div");e.className="transcription-recording-popup",e.innerHTML='\n            <div style="\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                width: 320px;\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                color: white;\n                border-radius: 12px;\n                padding: 20px;\n                box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n                z-index: 100000;\n                font-family: \'Google Sans\', sans-serif;\n            ">\n                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">\n                    <div style="display: flex; align-items: center; gap: 10px;">\n                        <div style="\n                            width: 8px;\n                            height: 8px;\n                            background: #ff4757;\n                            border-radius: 50%;\n                            animation: pulse 1.5s infinite;\n                        "></div>\n                        <span style="font-weight: 600;">Recording...</span>\n                    </div>\n                    <div class="recording-timer" style="\n                        font-family: monospace;\n                        font-weight: 600;\n                        background: rgba(255,255,255,0.2);\n                        padding: 4px 8px;\n                        border-radius: 10px;\n                    ">00:00</div>\n                </div>\n                <div style="text-align: center; margin: 15px 0;">\n                    <button id="stopRecording" style="\n                        background: #ff4757;\n                        color: white;\n                        border: none;\n                        padding: 12px 24px;\n                        border-radius: 20px;\n                        cursor: pointer;\n                        font-weight: 500;\n                        font-size: 14px;\n                    ">Stop & Process</button>\n                </div>\n                <div style="font-size: 12px; opacity: 0.8; text-align: center;">\n                    Using '.concat(this.provider.toUpperCase()," - Speak clearly for best results\n                </div>\n            </div>\n        ");const o=document.createElement("style");o.textContent="\n            @keyframes pulse {\n                0%, 100% { opacity: 1; transform: scale(1); }\n                50% { opacity: 0.7; transform: scale(1.3); }\n            }\n        ",document.head.appendChild(o),document.body.appendChild(e),this.recordingPopup=e,this.startTimer(),e.querySelector("#stopRecording").addEventListener("click",(()=>{this.stopRecording()}))}startTimer(){this.recordingStartTime=Date.now(),this.timerInterval=setInterval((()=>{if(this.recordingPopup){const e=Math.floor((Date.now()-this.recordingStartTime)/1e3),o=Math.floor(e/60).toString().padStart(2,"0"),t=(e%60).toString().padStart(2,"0"),n=this.recordingPopup.querySelector(".recording-timer");n&&(n.textContent="".concat(o,":").concat(t))}}),1e3)}async handleRecordingStop(){console.log("ðŸŽ¤ Handling recording stop..."),this.timerInterval&&clearInterval(this.timerInterval),this.recordingPopup&&(this.recordingPopup.remove(),this.recordingPopup=null),this.currentComposeView.querySelectorAll(".voice-transcribe-btn").forEach((e=>{e.innerHTML="Voice (".concat(this.provider.toUpperCase(),")"),e.style.background="#1a73e8"})),this.createCustomizationPopup();const e=new Blob(this.chunks,{type:"audio/webm"});this.chunks=[];try{this.processTranscriptionAsync(e)}catch(e){console.error("ðŸŽ¤ Error in processing:",e),this.updateCustomizationStatus("Error processing audio. Please try again.")}this.stream&&(this.stream.getTracks().forEach((e=>e.stop())),this.stream=null)}createCustomizationPopup(){console.log("ðŸŽ¤ Creating customization popup...");const e=document.createElement("div");e.className="transcription-customization-popup",e.innerHTML='\n            <div style="\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                width: 450px;\n                max-width: 90vw;\n                background: white;\n                border-radius: 16px;\n                box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n                z-index: 100001;\n                font-family: \'Google Sans\', sans-serif;\n                overflow: hidden;\n            ">\n                <div style="\n                    padding: 24px;\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                    color: white;\n                ">\n                    <h3 style="margin: 0 0 10px 0; font-size: 18px;">Customize Your Email</h3>\n                    <div class="processing-status" style="\n                        background: rgba(255,255,255,0.2);\n                        padding: 8px 12px;\n                        border-radius: 20px;\n                        font-size: 14px;\n                    ">Processing audio with '.concat(this.provider.toUpperCase(),'...</div>\n                </div>\n                \n                <div style="padding: 24px;">\n                    <div style="margin-bottom: 20px;">\n                        <label style="display: block; font-weight: 600; margin-bottom: 8px;">To (optional):</label>\n                        <input type="text" id="recipientName" placeholder="e.g., John, Dr. Smith" style="\n                            width: 100%;\n                            padding: 10px;\n                            border: 2px solid #e0e0e0;\n                            border-radius: 8px;\n                            font-size: 14px;\n                            box-sizing: border-box;\n                        ">\n                    </div>\n                    \n                    <div style="display: flex; gap: 16px; margin-bottom: 20px;">\n                        <div style="flex: 1;">\n                            <label style="display: block; font-weight: 600; margin-bottom: 8px;">Tone:</label>\n                            <select id="emailTone" style="\n                                width: 100%;\n                                padding: 10px;\n                                border: 2px solid #e0e0e0;\n                                border-radius: 8px;\n                                font-size: 14px;\n                            ">\n                                <option value="professional">Professional</option>\n                                <option value="friendly">Friendly</option>\n                                <option value="formal">Formal</option>\n                                <option value="casual">Casual</option>\n                            </select>\n                        </div>\n                        <div style="flex: 1;">\n                            <label style="display: block; font-weight: 600; margin-bottom: 8px;">Type:</label>\n                            <select id="emailType" style="\n                                width: 100%;\n                                padding: 10px;\n                                border: 2px solid #e0e0e0;\n                                border-radius: 8px;\n                                font-size: 14px;\n                            ">\n                                <option value="general">General</option>\n                                <option value="request">Request</option>\n                                <option value="follow-up">Follow-up</option>\n                                <option value="thank-you">Thank You</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n                \n                <div style="\n                    padding: 20px 24px;\n                    background: #f8f9fa;\n                    display: flex;\n                    gap: 12px;\n                    justify-content: flex-end;\n                ">\n                    <button id="cancelCustomization" style="\n                        background: transparent;\n                        color: #666;\n                        border: 2px solid #ddd;\n                        padding: 10px 20px;\n                        border-radius: 20px;\n                        cursor: pointer;\n                        font-weight: 500;\n                    ">Cancel</button>\n                    <button id="processWithOptions" disabled style="\n                        background: #4caf50;\n                        color: white;\n                        border: none;\n                        padding: 10px 20px;\n                        border-radius: 20px;\n                        cursor: pointer;\n                        font-weight: 500;\n                    ">\n                        <span class="btn-text">Insert Email</span>\n                    </button>\n                </div>\n            </div>\n        '),document.body.appendChild(e),this.customizationPopup=e,e.querySelector("#cancelCustomization").addEventListener("click",(()=>{this.closeCustomizationPopup()})),e.querySelector("#processWithOptions").addEventListener("click",(()=>{this.processWithCustomization()}))}async processTranscriptionAsync(e){console.log("ðŸŽ¤ Processing transcription with",this.provider,"API key available:",!!this.apiKey);try{var o;const t=await this.processTranscription(e);this.rawTranscription=t,console.log("ðŸŽ¤ Transcription complete:",t),this.updateCustomizationStatus('Audio processed! Configure options and click "Insert Email"');const n=null===(o=this.customizationPopup)||void 0===o?void 0:o.querySelector("#processWithOptions");n&&(n.disabled=!1)}catch(e){console.error("ðŸŽ¤ Error processing transcription:",e),this.updateCustomizationStatus("Error processing audio. Please try again.")}}async processTranscription(e){const o=new FormData;let t,n;o.append("file",e,"recording.webm"),"groq"===this.provider?(t="https://api.groq.com/openai/v1/audio/transcriptions",n="whisper-large-v3"):(t="https://api.openai.com/v1/audio/transcriptions",n="whisper-1"),o.append("model",n);const i=await fetch(t,{method:"POST",headers:{Authorization:"Bearer ".concat(this.apiKey)},body:o});if(i.ok)return(await i.json()).text;{const e=await i.text();throw console.error("ðŸŽ¤ Transcription API error:",i.status,e),new Error("Transcription failed: ".concat(i.status))}}async processWithCustomization(){if(console.log("ðŸŽ¤ Processing with customization..."),!this.rawTranscription)return void this.showMessage("Still processing audio, please wait...");const e=this.customizationPopup.querySelector("#processWithOptions");e.disabled=!0,e.querySelector(".btn-text").textContent="Processing...";try{const e=this.customizationPopup.querySelector("#recipientName").value.trim(),o=this.customizationPopup.querySelector("#emailTone").value,t=this.customizationPopup.querySelector("#emailType").value,n=await this.processWithAI(this.rawTranscription,e,o,t);console.log("ðŸŽ¤ Generated email:",n),this.insertTextIntoCompose(n),this.closeCustomizationPopup(),this.showMessage("Email transcribed and inserted successfully!")}catch(o){console.error("ðŸŽ¤ Error in final processing:",o),e.disabled=!1,e.querySelector(".btn-text").textContent="Insert Email",this.showMessage("Error processing email. Please try again.")}}async processWithAI(e,o,t,n){let i="You are an expert email writing assistant. Create a well-formatted, professional email based on the speech transcription provided.\n\nInstructions:\n- Correct any speech recognition errors\n- Format into proper email structure (greeting, body, closing)\n- Use a ".concat(t," tone throughout\n- This is a ").concat(n," email");o&&(i+="\n- Address the email to ".concat(o));const s={messages:[{role:"system",content:i},{role:"user",content:'Please convert this speech transcription into a well-formatted email:\n\n"'.concat(e,'"')}],temperature:.3,max_tokens:2048};let r;"groq"===this.provider?(r="https://api.groq.com/openai/v1/chat/completions",s.model="llama-3.3-70b-versatile"):(r="https://api.openai.com/v1/chat/completions",s.model="gpt-4");const a=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.apiKey)},body:JSON.stringify(s)});if(a.ok)return(await a.json()).choices[0].message.content.trim();{const e=await a.text();throw console.error("ðŸŽ¤ AI API error:",a.status,e),new Error("AI processing failed: ".concat(a.status))}}insertTextIntoCompose(e){console.log("ðŸŽ¤ Inserting text into compose...");const o=['[contenteditable="true"]','[role="textbox"]',".Am.Al.editable",".editable",'[g_editable="true"]','.ii.gt div[contenteditable="true"]'];let t=null;for(const e of o)if(t=this.currentComposeView.querySelector(e),t){console.log("ðŸŽ¤ Found compose body with selector:",e);break}if(t){t.focus(),t.innerHTML="";const o=e.replace(/\n/g,"<br><br>");t.innerHTML=o,["input","change","keyup"].forEach((e=>{const o=new Event(e,{bubbles:!0});t.dispatchEvent(o)})),console.log("ðŸŽ¤ Text inserted successfully!")}else console.error("ðŸŽ¤ Could not find compose body to insert text"),this.showMessage("Error: Could not find compose window to insert text")}updateCustomizationStatus(e){if(!this.customizationPopup)return;const o=this.customizationPopup.querySelector(".processing-status");o&&(o.textContent=e)}closeCustomizationPopup(){this.customizationPopup&&(this.customizationPopup.remove(),this.customizationPopup=null)}stopRecording(){console.log("ðŸŽ¤ Stopping recording..."),this.mediaRecorder&&this.recording&&(this.mediaRecorder.stop(),this.recording=!1)}showMessage(e){console.log("ðŸŽ¤ Email Transcription:",e);const o=document.createElement("div");o.textContent=e,o.style.cssText="\n            position: fixed;\n            top: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            background: #333;\n            color: white;\n            padding: 12px 20px;\n            border-radius: 6px;\n            z-index: 100002;\n            font-family: 'Google Sans', sans-serif;\n            max-width: 400px;\n            text-align: center;\n        ",document.body.appendChild(o),setTimeout((()=>{o.remove()}),4e3)}};setTimeout((()=>{const o=document.createElement("div");o.innerHTML="TEST",o.style.cssText="\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        width: 50px;\n        height: 50px;\n        background: #1a73e8;\n        color: white;\n        border-radius: 6px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 100000;\n        font-size: 12px;\n        font-weight: bold;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n    ",o.title="Extension loaded! Click compose to see voice button.",o.onclick=()=>{e.loadSettings().then((()=>{alert("Extension Status:\n\nProvider: ".concat(e.provider,"\nAPI Key: ").concat(e.apiKey?"Set":"Missing","\n\n1. Click compose in Gmail\n2. Look for voice button\n3. Make sure API key is saved"))}))},document.body.appendChild(o)}),3e3)})();
//# sourceMappingURL=content.js.map