(()=>{function e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function t(t){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?e(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):e(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function r(e,t,r){return(t=function(e){var t=function(e){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}document.addEventListener("DOMContentLoaded",(function(){console.log("ðŸŽ¤ Popup loaded");const e=document.getElementById("groqProvider"),r=document.getElementById("openaiProvider"),o=document.getElementById("groqRadio"),n=document.getElementById("openaiRadio"),i=document.getElementById("groqApiKey"),s=document.getElementById("openaiApiKey"),c=document.getElementById("saveSettings"),a=document.getElementById("status");function l(t){console.log("ðŸŽ¤ Selected provider:",t),o.checked="groq"===t,n.checked="openai"===t,e.classList.toggle("selected","groq"===t),r.classList.toggle("selected","openai"===t),chrome.storage.local.set({selectedProvider:t})}async function d(){console.log("ðŸŽ¤ Saving settings...");const e=o.checked?"groq":"openai",t=i.value.trim(),r=s.value.trim();if("groq"===e&&!t)return g("Please enter your Groq API key","error"),void i.focus();if("openai"===e&&!r)return g("Please enter your OpenAI API key","error"),void s.focus();if("groq"===e&&!t.startsWith("gsk_"))return g('Groq API keys should start with "gsk_"',"error"),void i.focus();if("openai"===e&&!r.startsWith("sk-"))return g('OpenAI API keys should start with "sk-"',"error"),void s.focus();c.disabled=!0,c.textContent="Saving...";try{await chrome.storage.local.set({selectedProvider:e,groqApiKey:t,openaiApiKey:r}),console.log("ðŸŽ¤ Settings saved successfully"),g("âœ… Settings saved successfully!","success"),setTimeout((()=>{window.close()}),1500)}catch(e){console.error("ðŸŽ¤ Error saving settings:",e),g("Error saving settings: "+e.message,"error")}finally{c.disabled=!1,c.textContent="Save Settings"}}function g(e,t){a.textContent=e,a.className="status ".concat(t),a.style.display="block","error"===t&&setTimeout((()=>{a.style.display="none"}),5e3)}!async function(){try{const e=await chrome.storage.local.get(["groqApiKey","openaiApiKey","selectedProvider"]);console.log("ðŸŽ¤ Loaded settings:",t(t({},e),{},{groqApiKey:e.groqApiKey?"[HIDDEN]":"none",openaiApiKey:e.openaiApiKey?"[HIDDEN]":"none"})),e.groqApiKey&&(i.value=e.groqApiKey),e.openaiApiKey&&(s.value=e.openaiApiKey),l(e.selectedProvider||"groq")}catch(e){console.error("ðŸŽ¤ Error loading settings:",e),g("Error loading settings","error")}}(),e.addEventListener("click",(()=>l("groq"))),r.addEventListener("click",(()=>l("openai"))),o.addEventListener("change",(()=>l("groq"))),n.addEventListener("change",(()=>l("openai"))),c.addEventListener("click",d),[i,s].forEach((e=>{e.addEventListener("keypress",(e=>{"Enter"===e.key&&d()}))}))}))})();
//# sourceMappingURL=popup.js.map