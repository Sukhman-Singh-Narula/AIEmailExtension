{"version":3,"file":"content.js","mappings":"AACAA,QAAQC,IAAI","sources":["webpack://@shashankvemuri/email-transcription/./src/content.js"],"sourcesContent":["// Robust Gmail Extension with proper error handling\r\nconsole.log('ðŸŽ¤ Email Transcription Extension: Content script loaded!');\r\n\r\n// Check if extension context is valid\r\nfunction isExtensionContextValid() {\r\n    try {\r\n        return chrome.runtime && chrome.runtime.id;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Safe chrome storage wrapper\r\nfunction safeStorageGet(keys) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!isExtensionContextValid()) {\r\n            console.warn('ðŸŽ¤ Extension context invalidated, using fallback storage');\r\n            // Try to get from sessionStorage as fallback\r\n            try {\r\n                const fallbackData = {};\r\n                keys.forEach(key => {\r\n                    const stored = sessionStorage.getItem(`voice_extension_${key}`);\r\n                    if (stored) {\r\n                        fallbackData[key] = stored;\r\n                    }\r\n                });\r\n                resolve(fallbackData);\r\n            } catch (e) {\r\n                resolve({}); // Return empty object if all fails\r\n            }\r\n            return;\r\n        }\r\n\r\n        try {\r\n            chrome.storage.local.get(keys, (result) => {\r\n                if (chrome.runtime.lastError) {\r\n                    console.error('ðŸŽ¤ Storage error:', chrome.runtime.lastError);\r\n                    resolve({});\r\n                } else {\r\n                    // Also store in sessionStorage as backup\r\n                    Object.keys(result).forEach(key => {\r\n                        if (result[key]) {\r\n                            sessionStorage.setItem(`voice_extension_${key}`, result[key]);\r\n                        }\r\n                    });\r\n                    resolve(result);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Chrome storage access failed:', error);\r\n            resolve({});\r\n        }\r\n    });\r\n}\r\n\r\nclass GmailEmailRecorder {\r\n    constructor() {\r\n        console.log('ðŸŽ¤ Initializing GmailEmailRecorder...');\r\n        this.recording = false;\r\n        this.mediaRecorder = null;\r\n        this.stream = null;\r\n        this.chunks = [];\r\n        this.recordingPopup = null;\r\n        this.customizationPopup = null;\r\n        this.currentComposeView = null;\r\n        this.provider = 'groq'; // default\r\n        this.apiKey = null;\r\n        this.isInitialized = false;\r\n\r\n        // Initialize when DOM is ready\r\n        if (document.readyState === 'loading') {\r\n            console.log('ðŸŽ¤ Waiting for DOM to load...');\r\n            document.addEventListener('DOMContentLoaded', () => this.init());\r\n        } else {\r\n            console.log('ðŸŽ¤ DOM already loaded, initializing...');\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        if (this.isInitialized) return;\r\n\r\n        console.log('ðŸŽ¤ Gmail extension initialized!');\r\n\r\n        try {\r\n            // Load settings first\r\n            await this.loadSettings();\r\n            this.isInitialized = true;\r\n\r\n            // Wait a bit for Gmail to load, then start looking for compose windows\r\n            setTimeout(() => {\r\n                this.waitForGmail();\r\n            }, 2000);\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Initialization error:', error);\r\n            // Still try to proceed with defaults\r\n            this.isInitialized = true;\r\n            setTimeout(() => {\r\n                this.waitForGmail();\r\n            }, 2000);\r\n        }\r\n    }\r\n\r\n    async loadSettings() {\r\n        try {\r\n            const result = await safeStorageGet([\r\n                'selectedProvider',\r\n                'groqApiKey',\r\n                'openaiApiKey'\r\n            ]);\r\n\r\n            console.log('ðŸŽ¤ Loaded settings successfully');\r\n\r\n            this.provider = result.selectedProvider || 'groq';\r\n\r\n            if (this.provider === 'groq' && result.groqApiKey) {\r\n                this.apiKey = result.groqApiKey;\r\n                console.log('ðŸŽ¤ Loaded Groq API key: Set');\r\n            } else if (this.provider === 'openai' && result.openaiApiKey) {\r\n                this.apiKey = result.openaiApiKey;\r\n                console.log('ðŸŽ¤ Loaded OpenAI API key: Set');\r\n            } else {\r\n                this.apiKey = null;\r\n                console.log('ðŸŽ¤ No API key found for provider:', this.provider);\r\n            }\r\n\r\n            console.log('ðŸŽ¤ Final settings - Provider:', this.provider, 'API Key:', this.apiKey ? 'Available' : 'Missing');\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error loading settings:', error);\r\n            // Use defaults\r\n            this.provider = 'groq';\r\n            this.apiKey = null;\r\n        }\r\n    }\r\n\r\n    waitForGmail() {\r\n        console.log('ðŸŽ¤ Starting to look for Gmail compose windows...');\r\n\r\n        const checkForCompose = () => {\r\n            try {\r\n                const composeSelectors = [\r\n                    '[role=\"dialog\"]',\r\n                    '.nH .no',\r\n                    '.AD',\r\n                    '[gh=\"cm\"]'\r\n                ];\r\n\r\n                let foundCompose = false;\r\n\r\n                composeSelectors.forEach(selector => {\r\n                    const elements = document.querySelectorAll(selector);\r\n                    elements.forEach(element => {\r\n                        if (this.isComposeWindow(element) && !element.querySelector('.voice-transcribe-btn')) {\r\n                            console.log('ðŸŽ¤ Found compose window!', element);\r\n                            this.addButtonToCompose(element);\r\n                            foundCompose = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (!foundCompose) {\r\n                    this.addComposeButtonListener();\r\n                }\r\n            } catch (error) {\r\n                console.error('ðŸŽ¤ Error in checkForCompose:', error);\r\n            }\r\n        };\r\n\r\n        checkForCompose();\r\n        const interval = setInterval(() => {\r\n            if (!document.body) {\r\n                clearInterval(interval);\r\n                return;\r\n            }\r\n            checkForCompose();\r\n        }, 2000);\r\n\r\n        // URL change detection\r\n        let lastUrl = location.href;\r\n        const observer = new MutationObserver(() => {\r\n            try {\r\n                const url = location.href;\r\n                if (url !== lastUrl) {\r\n                    lastUrl = url;\r\n                    console.log('ðŸŽ¤ URL changed, checking for compose windows...');\r\n                    setTimeout(checkForCompose, 1000);\r\n                }\r\n            } catch (error) {\r\n                console.error('ðŸŽ¤ Error in URL change detection:', error);\r\n            }\r\n        });\r\n\r\n        observer.observe(document, { subtree: true, childList: true });\r\n    }\r\n\r\n    isComposeWindow(element) {\r\n        const indicators = [\r\n            'input[name=\"to\"]',\r\n            'input[name=\"cc\"]',\r\n            'input[name=\"bcc\"]',\r\n            'input[name=\"subject\"]',\r\n            '[name=\"to\"]',\r\n            '[name=\"subject\"]',\r\n            '.aoT',\r\n            '.gO',\r\n            '[role=\"textbox\"]'\r\n        ];\r\n\r\n        return indicators.some(selector => element.querySelector(selector));\r\n    }\r\n\r\n    addComposeButtonListener() {\r\n        try {\r\n            const composeButtons = document.querySelectorAll('[role=\"button\"]');\r\n            composeButtons.forEach(button => {\r\n                const text = button.textContent.toLowerCase();\r\n                if (text.includes('compose') && !button.hasAttribute('data-voice-listener')) {\r\n                    button.setAttribute('data-voice-listener', 'true');\r\n                    button.addEventListener('click', () => {\r\n                        console.log('ðŸŽ¤ Compose button clicked, waiting for window...');\r\n                        setTimeout(() => {\r\n                            this.waitForGmail();\r\n                        }, 1000);\r\n                    });\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error adding compose button listener:', error);\r\n        }\r\n    }\r\n\r\n    addButtonToCompose(composeDialog) {\r\n        try {\r\n            console.log('ðŸŽ¤ Attempting to add button to compose window...');\r\n\r\n            const toolbarSelectors = [\r\n                '[role=\"toolbar\"]',\r\n                '.gU',\r\n                '.btC',\r\n                '.dC',\r\n                '.aDh',\r\n                '.aoP',\r\n                '.wO',\r\n                '.az9'\r\n            ];\r\n\r\n            let toolbar = null;\r\n            for (const selector of toolbarSelectors) {\r\n                toolbar = composeDialog.querySelector(selector);\r\n                if (toolbar) {\r\n                    console.log('ðŸŽ¤ Found toolbar with selector:', selector);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!toolbar) {\r\n                const sendButton = composeDialog.querySelector('[data-tooltip*=\"Send\"]') ||\r\n                    composeDialog.querySelector('[aria-label*=\"Send\"]') ||\r\n                    composeDialog.querySelector('.T-I.J-J5-Ji.aoO.v7.T-I-atl.L3');\r\n                if (sendButton) {\r\n                    toolbar = sendButton.parentElement;\r\n                    console.log('ðŸŽ¤ Found toolbar via send button');\r\n                }\r\n            }\r\n\r\n            if (!toolbar) {\r\n                console.log('ðŸŽ¤ No toolbar found, creating one...');\r\n                const composeBody = composeDialog.querySelector('[contenteditable=\"true\"]') ||\r\n                    composeDialog.querySelector('[role=\"textbox\"]');\r\n                if (composeBody) {\r\n                    toolbar = document.createElement('div');\r\n                    toolbar.style.cssText = 'padding: 10px; border-top: 1px solid #e0e0e0;';\r\n                    composeBody.parentElement.appendChild(toolbar);\r\n                }\r\n            }\r\n\r\n            if (!toolbar) {\r\n                console.log('ðŸŽ¤ Could not find or create toolbar');\r\n                return;\r\n            }\r\n\r\n            console.log('ðŸŽ¤ Adding voice button to toolbar...');\r\n\r\n            const voiceButton = document.createElement('button');\r\n            voiceButton.className = 'voice-transcribe-btn';\r\n            voiceButton.innerHTML = `Voice (${this.provider.toUpperCase()})`;\r\n            voiceButton.title = `Voice Transcribe Email using ${this.provider.toUpperCase()}`;\r\n            voiceButton.style.cssText = `\r\n                background: #1a73e8;\r\n                color: white;\r\n                border: none;\r\n                padding: 8px 16px;\r\n                border-radius: 20px;\r\n                cursor: pointer;\r\n                margin: 4px;\r\n                font-size: 13px;\r\n                font-weight: 500;\r\n                z-index: 1000;\r\n                position: relative;\r\n            `;\r\n\r\n            voiceButton.addEventListener('click', async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                console.log('ðŸŽ¤ Voice button clicked!');\r\n\r\n                try {\r\n                    // ALWAYS reload settings before recording\r\n                    console.log('ðŸŽ¤ Reloading settings before recording...');\r\n                    await this.loadSettings();\r\n\r\n                    if (!this.apiKey) {\r\n                        console.log('ðŸŽ¤ No API key found after reload');\r\n                        this.showMessage(`Please set your ${this.provider.toUpperCase()} API key in the extension popup first.`);\r\n                        return;\r\n                    }\r\n\r\n                    console.log('ðŸŽ¤ API key confirmed, starting recording...');\r\n                    this.currentComposeView = composeDialog;\r\n                    if (!this.recording) {\r\n                        this.startRecording();\r\n                    } else {\r\n                        this.stopRecording();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('ðŸŽ¤ Error in voice button click:', error);\r\n                    this.showMessage('Error starting recording. Please try again.');\r\n                }\r\n            });\r\n\r\n            toolbar.appendChild(voiceButton);\r\n            console.log('ðŸŽ¤ Voice button added successfully!');\r\n\r\n            this.addFallbackButton(composeDialog);\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error adding button to compose:', error);\r\n        }\r\n    }\r\n\r\n    addFallbackButton(composeDialog) {\r\n        try {\r\n            const floatingButton = document.createElement('div');\r\n            floatingButton.innerHTML = 'ðŸŽ¤ MIC';\r\n            floatingButton.title = `Voice Transcribe Email using ${this.provider.toUpperCase()}`;\r\n            floatingButton.style.cssText = `\r\n                position: absolute;\r\n                top: 10px;\r\n                right: 10px;\r\n                width: 50px;\r\n                height: 40px;\r\n                background: #1a73e8;\r\n                color: white;\r\n                border: none;\r\n                border-radius: 6px;\r\n                cursor: pointer;\r\n                font-size: 12px;\r\n                font-weight: bold;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                z-index: 10000;\r\n                box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n            `;\r\n\r\n            floatingButton.addEventListener('click', async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                console.log('ðŸŽ¤ Floating voice button clicked!');\r\n\r\n                try {\r\n                    // ALWAYS reload settings before recording\r\n                    await this.loadSettings();\r\n\r\n                    if (!this.apiKey) {\r\n                        this.showMessage(`Please set your ${this.provider.toUpperCase()} API key in the extension popup first.`);\r\n                        return;\r\n                    }\r\n\r\n                    this.currentComposeView = composeDialog;\r\n                    if (!this.recording) {\r\n                        this.startRecording();\r\n                    } else {\r\n                        this.stopRecording();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('ðŸŽ¤ Error in fallback button click:', error);\r\n                    this.showMessage('Error starting recording. Please try again.');\r\n                }\r\n            });\r\n\r\n            composeDialog.style.position = 'relative';\r\n            composeDialog.appendChild(floatingButton);\r\n            console.log('ðŸŽ¤ Floating voice button added!');\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error adding fallback button:', error);\r\n        }\r\n    }\r\n\r\n    async startRecording() {\r\n        console.log('ðŸŽ¤ Starting recording with API key:', this.apiKey ? 'Available' : 'Missing');\r\n\r\n        if (this.recording) {\r\n            this.showMessage('Recording is already in progress.');\r\n            return;\r\n        }\r\n\r\n        if (!this.apiKey) {\r\n            this.showMessage(`Please set your ${this.provider.toUpperCase()} API key in the extension popup first.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    sampleRate: 44100\r\n                }\r\n            });\r\n\r\n            this.mediaRecorder = new MediaRecorder(this.stream, {\r\n                mimeType: 'audio/webm;codecs=opus'\r\n            });\r\n\r\n            this.mediaRecorder.ondataavailable = (event) => this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = this.handleRecordingStop.bind(this);\r\n\r\n            this.createRecordingPopup();\r\n            this.mediaRecorder.start();\r\n            this.recording = true;\r\n\r\n            console.log('ðŸŽ¤ Recording started successfully!');\r\n\r\n            const buttons = this.currentComposeView.querySelectorAll('.voice-transcribe-btn');\r\n            buttons.forEach(button => {\r\n                button.innerHTML = 'Stop';\r\n                button.style.background = '#d93025';\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error starting recording:', error);\r\n            this.showMessage('Microphone access denied. Please enable microphone permissions.');\r\n        }\r\n    }\r\n\r\n    createRecordingPopup() {\r\n        console.log('ðŸŽ¤ Creating recording popup...');\r\n\r\n        try {\r\n            const popup = document.createElement('div');\r\n            popup.className = 'transcription-recording-popup';\r\n            popup.innerHTML = `\r\n                <div style=\"\r\n                    position: fixed;\r\n                    top: 20px;\r\n                    right: 20px;\r\n                    width: 320px;\r\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                    color: white;\r\n                    border-radius: 12px;\r\n                    padding: 20px;\r\n                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);\r\n                    z-index: 100000;\r\n                    font-family: 'Google Sans', sans-serif;\r\n                \">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <div style=\"\r\n                                width: 8px;\r\n                                height: 8px;\r\n                                background: #ff4757;\r\n                                border-radius: 50%;\r\n                                animation: pulse 1.5s infinite;\r\n                            \"></div>\r\n                            <span style=\"font-weight: 600;\">Recording...</span>\r\n                        </div>\r\n                        <div class=\"recording-timer\" style=\"\r\n                            font-family: monospace;\r\n                            font-weight: 600;\r\n                            background: rgba(255,255,255,0.2);\r\n                            padding: 4px 8px;\r\n                            border-radius: 10px;\r\n                        \">00:00</div>\r\n                    </div>\r\n                    <div style=\"text-align: center; margin: 15px 0;\">\r\n                        <button id=\"stopRecording\" style=\"\r\n                            background: #ff4757;\r\n                            color: white;\r\n                            border: none;\r\n                            padding: 12px 24px;\r\n                            border-radius: 20px;\r\n                            cursor: pointer;\r\n                            font-weight: 500;\r\n                            font-size: 14px;\r\n                        \">Stop & Process</button>\r\n                    </div>\r\n                    <div style=\"font-size: 12px; opacity: 0.8; text-align: center;\">\r\n                        Using ${this.provider.toUpperCase()} - Speak clearly for best results\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            const style = document.createElement('style');\r\n            style.textContent = `\r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; transform: scale(1); }\r\n                    50% { opacity: 0.7; transform: scale(1.3); }\r\n                }\r\n            `;\r\n            document.head.appendChild(style);\r\n\r\n            document.body.appendChild(popup);\r\n            this.recordingPopup = popup;\r\n\r\n            this.startTimer();\r\n\r\n            popup.querySelector('#stopRecording').addEventListener('click', () => {\r\n                this.stopRecording();\r\n            });\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error creating recording popup:', error);\r\n        }\r\n    }\r\n\r\n    startTimer() {\r\n        this.recordingStartTime = Date.now();\r\n        this.timerInterval = setInterval(() => {\r\n            try {\r\n                if (this.recordingPopup) {\r\n                    const elapsed = Math.floor((Date.now() - this.recordingStartTime) / 1000);\r\n                    const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');\r\n                    const seconds = (elapsed % 60).toString().padStart(2, '0');\r\n                    const timerElement = this.recordingPopup.querySelector('.recording-timer');\r\n                    if (timerElement) {\r\n                        timerElement.textContent = `${minutes}:${seconds}`;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('ðŸŽ¤ Error updating timer:', error);\r\n                clearInterval(this.timerInterval);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    async handleRecordingStop() {\r\n        console.log('ðŸŽ¤ Handling recording stop...');\r\n\r\n        try {\r\n            if (this.timerInterval) {\r\n                clearInterval(this.timerInterval);\r\n            }\r\n\r\n            if (this.recordingPopup) {\r\n                this.recordingPopup.remove();\r\n                this.recordingPopup = null;\r\n            }\r\n\r\n            const buttons = this.currentComposeView.querySelectorAll('.voice-transcribe-btn');\r\n            buttons.forEach(button => {\r\n                button.innerHTML = `Voice (${this.provider.toUpperCase()})`;\r\n                button.style.background = '#1a73e8';\r\n            });\r\n\r\n            this.createCustomizationPopup();\r\n\r\n            const audioBlob = new Blob(this.chunks, { type: 'audio/webm' });\r\n            this.chunks = [];\r\n\r\n            this.processTranscriptionAsync(audioBlob);\r\n\r\n            if (this.stream) {\r\n                this.stream.getTracks().forEach((track) => track.stop());\r\n                this.stream = null;\r\n            }\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error in handleRecordingStop:', error);\r\n            this.showMessage('Error processing recording. Please try again.');\r\n        }\r\n    }\r\n\r\n    createCustomizationPopup() {\r\n        console.log('ðŸŽ¤ Creating customization popup...');\r\n\r\n        try {\r\n            const popup = document.createElement('div');\r\n            popup.className = 'transcription-customization-popup';\r\n            popup.innerHTML = `\r\n                <div style=\"\r\n                    position: fixed;\r\n                    top: 50%;\r\n                    left: 50%;\r\n                    transform: translate(-50%, -50%);\r\n                    width: 450px;\r\n                    max-width: 90vw;\r\n                    background: white;\r\n                    border-radius: 16px;\r\n                    box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n                    z-index: 100001;\r\n                    font-family: 'Google Sans', sans-serif;\r\n                    overflow: hidden;\r\n                \">\r\n                    <div style=\"\r\n                        padding: 24px;\r\n                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                        color: white;\r\n                    \">\r\n                        <h3 style=\"margin: 0 0 10px 0; font-size: 18px;\">Customize Your Email</h3>\r\n                        <div class=\"processing-status\" style=\"\r\n                            background: rgba(255,255,255,0.2);\r\n                            padding: 8px 12px;\r\n                            border-radius: 20px;\r\n                            font-size: 14px;\r\n                        \">Processing audio with ${this.provider.toUpperCase()}...</div>\r\n                    </div>\r\n                    \r\n                    <div style=\"padding: 24px;\">\r\n                        <div style=\"margin-bottom: 20px;\">\r\n                            <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">To (optional):</label>\r\n                            <input type=\"text\" id=\"recipientName\" placeholder=\"e.g., John, Dr. Smith\" style=\"\r\n                                width: 100%;\r\n                                padding: 10px;\r\n                                border: 2px solid #e0e0e0;\r\n                                border-radius: 8px;\r\n                                font-size: 14px;\r\n                                box-sizing: border-box;\r\n                            \">\r\n                        </div>\r\n                        \r\n                        <div style=\"display: flex; gap: 16px; margin-bottom: 20px;\">\r\n                            <div style=\"flex: 1;\">\r\n                                <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">Tone:</label>\r\n                                <select id=\"emailTone\" style=\"\r\n                                    width: 100%;\r\n                                    padding: 10px;\r\n                                    border: 2px solid #e0e0e0;\r\n                                    border-radius: 8px;\r\n                                    font-size: 14px;\r\n                                \">\r\n                                    <option value=\"professional\">Professional</option>\r\n                                    <option value=\"friendly\">Friendly</option>\r\n                                    <option value=\"formal\">Formal</option>\r\n                                    <option value=\"casual\">Casual</option>\r\n                                </select>\r\n                            </div>\r\n                            <div style=\"flex: 1;\">\r\n                                <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">Type:</label>\r\n                                <select id=\"emailType\" style=\"\r\n                                    width: 100%;\r\n                                    padding: 10px;\r\n                                    border: 2px solid #e0e0e0;\r\n                                    border-radius: 8px;\r\n                                    font-size: 14px;\r\n                                \">\r\n                                    <option value=\"general\">General</option>\r\n                                    <option value=\"request\">Request</option>\r\n                                    <option value=\"follow-up\">Follow-up</option>\r\n                                    <option value=\"thank-you\">Thank You</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div style=\"\r\n                        padding: 20px 24px;\r\n                        background: #f8f9fa;\r\n                        display: flex;\r\n                        gap: 12px;\r\n                        justify-content: flex-end;\r\n                    \">\r\n                        <button id=\"cancelCustomization\" style=\"\r\n                            background: transparent;\r\n                            color: #666;\r\n                            border: 2px solid #ddd;\r\n                            padding: 10px 20px;\r\n                            border-radius: 20px;\r\n                            cursor: pointer;\r\n                            font-weight: 500;\r\n                        \">Cancel</button>\r\n                        <button id=\"processWithOptions\" disabled style=\"\r\n                            background: #4caf50;\r\n                            color: white;\r\n                            border: none;\r\n                            padding: 10px 20px;\r\n                            border-radius: 20px;\r\n                            cursor: pointer;\r\n                            font-weight: 500;\r\n                        \">\r\n                            <span class=\"btn-text\">Insert Email</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            document.body.appendChild(popup);\r\n            this.customizationPopup = popup;\r\n\r\n            popup.querySelector('#cancelCustomization').addEventListener('click', () => {\r\n                this.closeCustomizationPopup();\r\n            });\r\n\r\n            popup.querySelector('#processWithOptions').addEventListener('click', () => {\r\n                this.processWithCustomization();\r\n            });\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error creating customization popup:', error);\r\n        }\r\n    }\r\n\r\n    async processTranscriptionAsync(audioBlob) {\r\n        console.log('ðŸŽ¤ Processing transcription with', this.provider, 'API key available:', !!this.apiKey);\r\n\r\n        try {\r\n            const transcriptionText = await this.processTranscription(audioBlob);\r\n            this.rawTranscription = transcriptionText;\r\n\r\n            console.log('ðŸŽ¤ Transcription complete:', transcriptionText);\r\n\r\n            this.updateCustomizationStatus('Audio processed! Configure options and click \"Insert Email\"');\r\n\r\n            const processBtn = this.customizationPopup?.querySelector('#processWithOptions');\r\n            if (processBtn) {\r\n                processBtn.disabled = false;\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error processing transcription:', error);\r\n            this.updateCustomizationStatus('Error processing audio. Please try again.');\r\n            this.showMessage('Transcription failed. Please check your API key and try again.');\r\n        }\r\n    }\r\n\r\n    async processTranscription(audioBlob) {\r\n        const formData = new FormData();\r\n        formData.append('file', audioBlob, 'recording.webm');\r\n\r\n        let url, model;\r\n\r\n        if (this.provider === 'groq') {\r\n            url = 'https://api.groq.com/openai/v1/audio/transcriptions';\r\n            model = 'whisper-large-v3';\r\n        } else {\r\n            url = 'https://api.openai.com/v1/audio/transcriptions';\r\n            model = 'whisper-1';\r\n        }\r\n\r\n        formData.append('model', model);\r\n        formData.append('language', 'en'); // Force English language\r\n        formData.append('response_format', 'text');\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: { 'Authorization': `Bearer ${this.apiKey}` },\r\n            body: formData,\r\n        });\r\n\r\n        if (response.ok) {\r\n            const result = await response.text(); // Changed from json() to text()\r\n            return result;\r\n        } else {\r\n            const errorText = await response.text();\r\n            console.error('ðŸŽ¤ Transcription API error:', response.status, errorText);\r\n            throw new Error(`Transcription failed: ${response.status}`);\r\n        }\r\n    }\r\n\r\n    async processWithCustomization() {\r\n        console.log('ðŸŽ¤ Processing with customization...');\r\n\r\n        if (!this.rawTranscription) {\r\n            this.showMessage('Still processing audio, please wait...');\r\n            return;\r\n        }\r\n\r\n        const processBtn = this.customizationPopup.querySelector('#processWithOptions');\r\n        processBtn.disabled = true;\r\n        processBtn.querySelector('.btn-text').textContent = 'Processing...';\r\n\r\n        try {\r\n            const recipientName = this.customizationPopup.querySelector('#recipientName').value.trim();\r\n            const emailTone = this.customizationPopup.querySelector('#emailTone').value;\r\n            const emailType = this.customizationPopup.querySelector('#emailType').value;\r\n\r\n            const optimizedText = await this.processWithAI(\r\n                this.rawTranscription,\r\n                recipientName,\r\n                emailTone,\r\n                emailType\r\n            );\r\n\r\n            console.log('ðŸŽ¤ Generated email:', optimizedText);\r\n\r\n            this.insertTextIntoCompose(optimizedText);\r\n            this.closeCustomizationPopup();\r\n            this.showMessage('Email transcribed and inserted successfully!');\r\n\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error in final processing:', error);\r\n            processBtn.disabled = false;\r\n            processBtn.querySelector('.btn-text').textContent = 'Insert Email';\r\n            this.showMessage('Error processing email. Please try again.');\r\n        }\r\n    }\r\n\r\n    async processWithAI(transcriptionText, recipientName, tone, emailType) {\r\n        let systemPrompt = `You are an expert email writing assistant. Create a well-formatted email based on the speech transcription provided.\r\n\r\nInstructions:\r\n- Correct any speech recognition errors and translate any non-English text to English\r\n- Extract the subject line if mentioned in the speech\r\n- Format into proper email structure with greeting, body, and closing\r\n- Use a ${tone} tone throughout\r\n- This is a ${emailType} email\r\n- Return ONLY the email content without any extra explanatory text\r\n\r\nResponse format:\r\nSUBJECT: [extracted subject or relevant subject]\r\nBODY: [clean email body with greeting, content, closing]`;\r\n\r\n        if (recipientName) {\r\n            systemPrompt += `\\n- Address the email to ${recipientName}`;\r\n        }\r\n\r\n        const requestBody = {\r\n            messages: [\r\n                { role: \"system\", content: systemPrompt },\r\n                { role: \"user\", content: `Please convert this speech transcription into a well-formatted email:\\n\\n\"${transcriptionText}\"` }\r\n            ],\r\n            temperature: 0.3,\r\n            max_tokens: 2048\r\n        };\r\n\r\n        let url;\r\n\r\n        if (this.provider === 'groq') {\r\n            url = 'https://api.groq.com/openai/v1/chat/completions';\r\n            requestBody.model = \"llama-3.3-70b-versatile\";\r\n        } else {\r\n            url = 'https://api.openai.com/v1/chat/completions';\r\n            requestBody.model = \"gpt-4\";\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.apiKey}`\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        if (response.ok) {\r\n            const result = await response.json();\r\n            return result.choices[0].message.content.trim();\r\n        } else {\r\n            const errorText = await response.text();\r\n            console.error('ðŸŽ¤ AI API error:', response.status, errorText);\r\n            throw new Error(`AI processing failed: ${response.status}`);\r\n        }\r\n    }\r\n\r\n    insertTextIntoCompose(text) {\r\n        console.log('ðŸŽ¤ Inserting text into compose...');\r\n\r\n        try {\r\n            // Parse the AI response to extract subject and body\r\n            const lines = text.split('\\n');\r\n            let subject = '';\r\n            let body = '';\r\n            let isBodySection = false;\r\n\r\n            for (const line of lines) {\r\n                if (line.startsWith('SUBJECT:')) {\r\n                    subject = line.replace('SUBJECT:', '').trim();\r\n                } else if (line.startsWith('BODY:')) {\r\n                    body = line.replace('BODY:', '').trim();\r\n                    isBodySection = true;\r\n                } else if (isBodySection) {\r\n                    body += '\\n' + line;\r\n                }\r\n            }\r\n\r\n            // If no structured format, treat everything as body\r\n            if (!subject && !body) {\r\n                body = text;\r\n            }\r\n\r\n            // Insert subject if found\r\n            if (subject) {\r\n                const subjectField = this.currentComposeView.querySelector('input[name=\"subject\"]') ||\r\n                    this.currentComposeView.querySelector('[aria-label*=\"Subject\"]') ||\r\n                    this.currentComposeView.querySelector('[placeholder*=\"Subject\"]');\r\n\r\n                if (subjectField) {\r\n                    subjectField.value = subject;\r\n                    subjectField.dispatchEvent(new Event('input', { bubbles: true }));\r\n                    subjectField.dispatchEvent(new Event('change', { bubbles: true }));\r\n                    console.log('ðŸŽ¤ Subject inserted:', subject);\r\n                }\r\n            }\r\n\r\n            // Insert body\r\n            const composeSelectors = [\r\n                '[contenteditable=\"true\"]',\r\n                '[role=\"textbox\"]',\r\n                '.Am.Al.editable',\r\n                '.editable',\r\n                '[g_editable=\"true\"]',\r\n                '.ii.gt div[contenteditable=\"true\"]'\r\n            ];\r\n\r\n            let composeBody = null;\r\n            for (const selector of composeSelectors) {\r\n                composeBody = this.currentComposeView.querySelector(selector);\r\n                if (composeBody) {\r\n                    console.log('ðŸŽ¤ Found compose body with selector:', selector);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (composeBody) {\r\n                composeBody.focus();\r\n                composeBody.innerHTML = '';\r\n\r\n                // Clean up body text and format for HTML\r\n                const cleanBody = body.trim();\r\n                const formattedText = cleanBody.replace(/\\n/g, '<br><br>');\r\n                composeBody.innerHTML = formattedText;\r\n\r\n                const events = ['input', 'change', 'keyup'];\r\n                events.forEach(eventType => {\r\n                    const event = new Event(eventType, { bubbles: true });\r\n                    composeBody.dispatchEvent(event);\r\n                });\r\n\r\n                console.log('ðŸŽ¤ Text inserted successfully!');\r\n            } else {\r\n                console.error('ðŸŽ¤ Could not find compose body to insert text');\r\n                this.showMessage('Error: Could not find compose window to insert text');\r\n            }\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error inserting text:', error);\r\n            this.showMessage('Error inserting email. Please try again.');\r\n        }\r\n    }\r\n\r\n    updateCustomizationStatus(message) {\r\n        if (!this.customizationPopup) return;\r\n        const statusElement = this.customizationPopup.querySelector('.processing-status');\r\n        if (statusElement) {\r\n            statusElement.textContent = message;\r\n        }\r\n    }\r\n\r\n    closeCustomizationPopup() {\r\n        if (this.customizationPopup) {\r\n            this.customizationPopup.remove();\r\n            this.customizationPopup = null;\r\n        }\r\n    }\r\n\r\n    stopRecording() {\r\n        console.log('ðŸŽ¤ Stopping recording...');\r\n        if (this.mediaRecorder && this.recording) {\r\n            this.mediaRecorder.stop();\r\n            this.recording = false;\r\n        }\r\n    }\r\n\r\n    showMessage(message) {\r\n        console.log('ðŸŽ¤ Email Transcription:', message);\r\n\r\n        try {\r\n            const toast = document.createElement('div');\r\n            toast.textContent = message;\r\n            toast.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #333;\r\n                color: white;\r\n                padding: 12px 20px;\r\n                border-radius: 6px;\r\n                z-index: 100002;\r\n                font-family: 'Google Sans', sans-serif;\r\n                max-width: 400px;\r\n                text-align: center;\r\n            `;\r\n            document.body.appendChild(toast);\r\n\r\n            setTimeout(() => {\r\n                if (toast.parentNode) {\r\n                    toast.remove();\r\n                }\r\n            }, 4000);\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error showing message:', error);\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize the extension with error handling\r\n"],"names":["console","log"],"sourceRoot":""}