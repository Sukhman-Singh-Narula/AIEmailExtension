{"version":3,"file":"content.js","mappings":"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","sources":["webpack://@shashankvemuri/email-transcription/./src/content.js"],"sourcesContent":["// Updated Gmail Extension with provider support\r\nconsole.log('🎤 Email Transcription Extension: Content script loaded!');\r\n\r\nclass GmailEmailRecorder {\r\n    constructor() {\r\n        console.log('🎤 Initializing GmailEmailRecorder...');\r\n        this.recording = false;\r\n        this.mediaRecorder = null;\r\n        this.stream = null;\r\n        this.chunks = [];\r\n        this.recordingPopup = null;\r\n        this.customizationPopup = null;\r\n        this.currentComposeView = null;\r\n        this.provider = 'groq'; // default\r\n        this.apiKey = null;\r\n\r\n        // Initialize when DOM is ready\r\n        if (document.readyState === 'loading') {\r\n            console.log('🎤 Waiting for DOM to load...');\r\n            document.addEventListener('DOMContentLoaded', () => this.init());\r\n        } else {\r\n            console.log('🎤 DOM already loaded, initializing...');\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        console.log('🎤 Gmail extension initialized!');\r\n\r\n        // Load settings first\r\n        await this.loadSettings();\r\n\r\n        // Wait a bit for Gmail to load, then start looking for compose windows\r\n        setTimeout(() => {\r\n            this.waitForGmail();\r\n        }, 2000);\r\n    }\r\n\r\n    async loadSettings() {\r\n        try {\r\n            const result = await chrome.storage.local.get([\r\n                'selectedProvider',\r\n                'groqApiKey',\r\n                'openaiApiKey'\r\n            ]);\r\n\r\n            this.provider = result.selectedProvider || 'groq';\r\n\r\n            if (this.provider === 'groq' && result.groqApiKey) {\r\n                this.apiKey = result.groqApiKey;\r\n            } else if (this.provider === 'openai' && result.openaiApiKey) {\r\n                this.apiKey = result.openaiApiKey;\r\n            }\r\n\r\n            console.log('🎤 Loaded settings - Provider:', this.provider, 'API Key:', this.apiKey ? 'Set' : 'Not set');\r\n\r\n        } catch (error) {\r\n            console.error('🎤 Error loading settings:', error);\r\n        }\r\n    }\r\n\r\n    waitForGmail() {\r\n        console.log('🎤 Starting to look for Gmail compose windows...');\r\n\r\n        const checkForCompose = () => {\r\n            const composeSelectors = [\r\n                '[role=\"dialog\"]',\r\n                '.nH .no',\r\n                '.AD',\r\n                '[gh=\"cm\"]'\r\n            ];\r\n\r\n            let foundCompose = false;\r\n\r\n            composeSelectors.forEach(selector => {\r\n                const elements = document.querySelectorAll(selector);\r\n                elements.forEach(element => {\r\n                    if (this.isComposeWindow(element) && !element.querySelector('.voice-transcribe-btn')) {\r\n                        console.log('🎤 Found compose window!', element);\r\n                        this.addButtonToCompose(element);\r\n                        foundCompose = true;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!foundCompose) {\r\n                this.addComposeButtonListener();\r\n            }\r\n        };\r\n\r\n        checkForCompose();\r\n        setInterval(checkForCompose, 2000);\r\n\r\n        let lastUrl = location.href;\r\n        new MutationObserver(() => {\r\n            const url = location.href;\r\n            if (url !== lastUrl) {\r\n                lastUrl = url;\r\n                console.log('🎤 URL changed, checking for compose windows...');\r\n                setTimeout(checkForCompose, 1000);\r\n            }\r\n        }).observe(document, { subtree: true, childList: true });\r\n    }\r\n\r\n    isComposeWindow(element) {\r\n        const indicators = [\r\n            'input[name=\"to\"]',\r\n            'input[name=\"cc\"]',\r\n            'input[name=\"bcc\"]',\r\n            'input[name=\"subject\"]',\r\n            '[name=\"to\"]',\r\n            '[name=\"subject\"]',\r\n            '.aoT',\r\n            '.gO',\r\n            '[role=\"textbox\"]'\r\n        ];\r\n\r\n        return indicators.some(selector => element.querySelector(selector));\r\n    }\r\n\r\n    addComposeButtonListener() {\r\n        const composeButtons = document.querySelectorAll('[role=\"button\"]');\r\n        composeButtons.forEach(button => {\r\n            const text = button.textContent.toLowerCase();\r\n            if (text.includes('compose') && !button.hasAttribute('data-voice-listener')) {\r\n                button.setAttribute('data-voice-listener', 'true');\r\n                button.addEventListener('click', () => {\r\n                    console.log('🎤 Compose button clicked, waiting for window...');\r\n                    setTimeout(() => {\r\n                        this.waitForGmail();\r\n                    }, 1000);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    addButtonToCompose(composeDialog) {\r\n        console.log('🎤 Attempting to add button to compose window...');\r\n\r\n        const toolbarSelectors = [\r\n            '[role=\"toolbar\"]',\r\n            '.gU',\r\n            '.btC',\r\n            '.dC',\r\n            '.aDh',\r\n            '.aoP',\r\n            '.wO',\r\n            '.az9'\r\n        ];\r\n\r\n        let toolbar = null;\r\n        for (const selector of toolbarSelectors) {\r\n            toolbar = composeDialog.querySelector(selector);\r\n            if (toolbar) {\r\n                console.log('🎤 Found toolbar with selector:', selector);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!toolbar) {\r\n            const sendButton = composeDialog.querySelector('[data-tooltip*=\"Send\"]') ||\r\n                composeDialog.querySelector('[aria-label*=\"Send\"]') ||\r\n                composeDialog.querySelector('.T-I.J-J5-Ji.aoO.v7.T-I-atl.L3');\r\n            if (sendButton) {\r\n                toolbar = sendButton.parentElement;\r\n                console.log('🎤 Found toolbar via send button');\r\n            }\r\n        }\r\n\r\n        if (!toolbar) {\r\n            console.log('🎤 No toolbar found, creating one...');\r\n            const composeBody = composeDialog.querySelector('[contenteditable=\"true\"]') ||\r\n                composeDialog.querySelector('[role=\"textbox\"]');\r\n            if (composeBody) {\r\n                toolbar = document.createElement('div');\r\n                toolbar.style.cssText = 'padding: 10px; border-top: 1px solid #e0e0e0;';\r\n                composeBody.parentElement.appendChild(toolbar);\r\n            }\r\n        }\r\n\r\n        if (!toolbar) {\r\n            console.log('🎤 Could not find or create toolbar');\r\n            return;\r\n        }\r\n\r\n        console.log('🎤 Adding voice button to toolbar...');\r\n\r\n        const voiceButton = document.createElement('button');\r\n        voiceButton.className = 'voice-transcribe-btn';\r\n        voiceButton.innerHTML = `🎤 Voice (${this.provider.toUpperCase()})`;\r\n        voiceButton.title = `Voice Transcribe Email using ${this.provider.toUpperCase()}`;\r\n        voiceButton.style.cssText = `\r\n            background: #1a73e8;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 16px;\r\n            border-radius: 20px;\r\n            cursor: pointer;\r\n            margin: 4px;\r\n            font-size: 13px;\r\n            font-weight: 500;\r\n            z-index: 1000;\r\n            position: relative;\r\n        `;\r\n\r\n        voiceButton.addEventListener('click', async (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            console.log('🎤 Voice button clicked!');\r\n\r\n            // Reload settings before recording\r\n            await this.loadSettings();\r\n\r\n            if (!this.apiKey) {\r\n                this.showMessage(`Please set your ${this.provider.toUpperCase()} API key in the extension popup first.`);\r\n                return;\r\n            }\r\n\r\n            this.currentComposeView = composeDialog;\r\n            if (!this.recording) {\r\n                this.startRecording();\r\n            } else {\r\n                this.stopRecording();\r\n            }\r\n        });\r\n\r\n        toolbar.appendChild(voiceButton);\r\n        console.log('🎤 Voice button added successfully!');\r\n\r\n        this.addFallbackButton(composeDialog);\r\n    }\r\n\r\n    addFallbackButton(composeDialog) {\r\n        const floatingButton = document.createElement('div');\r\n        floatingButton.innerHTML = '🎤';\r\n        floatingButton.title = `Voice Transcribe Email using ${this.provider.toUpperCase()}`;\r\n        floatingButton.style.cssText = `\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            width: 40px;\r\n            height: 40px;\r\n            background: #1a73e8;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 50%;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            z-index: 10000;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.3);\r\n        `;\r\n\r\n        floatingButton.addEventListener('click', async (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            console.log('🎤 Floating voice button clicked!');\r\n\r\n            await this.loadSettings();\r\n\r\n            if (!this.apiKey) {\r\n                this.showMessage(`Please set your ${this.provider.toUpperCase()} API key in the extension popup first.`);\r\n                return;\r\n            }\r\n\r\n            this.currentComposeView = composeDialog;\r\n            if (!this.recording) {\r\n                this.startRecording();\r\n            } else {\r\n                this.stopRecording();\r\n            }\r\n        });\r\n\r\n        composeDialog.style.position = 'relative';\r\n        composeDialog.appendChild(floatingButton);\r\n        console.log('🎤 Floating voice button added!');\r\n    }\r\n\r\n    async startRecording() {\r\n        console.log('🎤 Starting recording...');\r\n\r\n        if (this.recording) {\r\n            this.showMessage('Recording is already in progress.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: {\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    sampleRate: 44100\r\n                }\r\n            });\r\n\r\n            this.mediaRecorder = new MediaRecorder(this.stream, {\r\n                mimeType: 'audio/webm;codecs=opus'\r\n            });\r\n\r\n            this.mediaRecorder.ondataavailable = (event) => this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = this.handleRecordingStop.bind(this);\r\n\r\n            this.createRecordingPopup();\r\n            this.mediaRecorder.start();\r\n            this.recording = true;\r\n\r\n            console.log('🎤 Recording started successfully!');\r\n\r\n            const buttons = this.currentComposeView.querySelectorAll('.voice-transcribe-btn');\r\n            buttons.forEach(button => {\r\n                button.innerHTML = '⏹️ Stop';\r\n                button.style.background = '#d93025';\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('🎤 Error starting recording:', error);\r\n            this.showMessage('Microphone access denied. Please enable microphone permissions.');\r\n        }\r\n    }\r\n\r\n    createRecordingPopup() {\r\n        console.log('🎤 Creating recording popup...');\r\n\r\n        const popup = document.createElement('div');\r\n        popup.className = 'transcription-recording-popup';\r\n        popup.innerHTML = `\r\n            <div style=\"\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                width: 320px;\r\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                color: white;\r\n                border-radius: 12px;\r\n                padding: 20px;\r\n                box-shadow: 0 10px 30px rgba(0,0,0,0.3);\r\n                z-index: 100000;\r\n                font-family: 'Google Sans', sans-serif;\r\n            \">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                        <div style=\"\r\n                            width: 8px;\r\n                            height: 8px;\r\n                            background: #ff4757;\r\n                            border-radius: 50%;\r\n                            animation: pulse 1.5s infinite;\r\n                        \"></div>\r\n                        <span style=\"font-weight: 600;\">Recording...</span>\r\n                    </div>\r\n                    <div class=\"recording-timer\" style=\"\r\n                        font-family: monospace;\r\n                        font-weight: 600;\r\n                        background: rgba(255,255,255,0.2);\r\n                        padding: 4px 8px;\r\n                        border-radius: 10px;\r\n                    \">00:00</div>\r\n                </div>\r\n                <div style=\"text-align: center; margin: 15px 0;\">\r\n                    <button id=\"stopRecording\" style=\"\r\n                        background: #ff4757;\r\n                        color: white;\r\n                        border: none;\r\n                        padding: 12px 24px;\r\n                        border-radius: 20px;\r\n                        cursor: pointer;\r\n                        font-weight: 500;\r\n                        font-size: 14px;\r\n                    \">Stop & Process</button>\r\n                </div>\r\n                <div style=\"font-size: 12px; opacity: 0.8; text-align: center;\">\r\n                    Using ${this.provider.toUpperCase()} • Speak clearly for best results\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes pulse {\r\n                0%, 100% { opacity: 1; transform: scale(1); }\r\n                50% { opacity: 0.7; transform: scale(1.3); }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        document.body.appendChild(popup);\r\n        this.recordingPopup = popup;\r\n\r\n        this.startTimer();\r\n\r\n        popup.querySelector('#stopRecording').addEventListener('click', () => {\r\n            this.stopRecording();\r\n        });\r\n    }\r\n\r\n    startTimer() {\r\n        this.recordingStartTime = Date.now();\r\n        this.timerInterval = setInterval(() => {\r\n            if (this.recordingPopup) {\r\n                const elapsed = Math.floor((Date.now() - this.recordingStartTime) / 1000);\r\n                const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');\r\n                const seconds = (elapsed % 60).toString().padStart(2, '0');\r\n                const timerElement = this.recordingPopup.querySelector('.recording-timer');\r\n                if (timerElement) {\r\n                    timerElement.textContent = `${minutes}:${seconds}`;\r\n                }\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    async handleRecordingStop() {\r\n        console.log('🎤 Handling recording stop...');\r\n\r\n        if (this.timerInterval) {\r\n            clearInterval(this.timerInterval);\r\n        }\r\n\r\n        if (this.recordingPopup) {\r\n            this.recordingPopup.remove();\r\n            this.recordingPopup = null;\r\n        }\r\n\r\n        const buttons = this.currentComposeView.querySelectorAll('.voice-transcribe-btn');\r\n        buttons.forEach(button => {\r\n            button.innerHTML = `🎤 Voice (${this.provider.toUpperCase()})`;\r\n            button.style.background = '#1a73e8';\r\n        });\r\n\r\n        this.createCustomizationPopup();\r\n\r\n        const audioBlob = new Blob(this.chunks, { type: 'audio/webm' });\r\n        this.chunks = [];\r\n\r\n        try {\r\n            this.processTranscriptionAsync(audioBlob);\r\n        } catch (error) {\r\n            console.error('🎤 Error in processing:', error);\r\n            this.updateCustomizationStatus('Error processing audio. Please try again.');\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stream.getTracks().forEach((track) => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    createCustomizationPopup() {\r\n        console.log('🎤 Creating customization popup...');\r\n\r\n        const popup = document.createElement('div');\r\n        popup.className = 'transcription-customization-popup';\r\n        popup.innerHTML = `\r\n            <div style=\"\r\n                position: fixed;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n                width: 450px;\r\n                max-width: 90vw;\r\n                background: white;\r\n                border-radius: 16px;\r\n                box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n                z-index: 100001;\r\n                font-family: 'Google Sans', sans-serif;\r\n                overflow: hidden;\r\n            \">\r\n                <div style=\"\r\n                    padding: 24px;\r\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n                    color: white;\r\n                \">\r\n                    <h3 style=\"margin: 0 0 10px 0; font-size: 18px;\">🎯 Customize Your Email</h3>\r\n                    <div class=\"processing-status\" style=\"\r\n                        background: rgba(255,255,255,0.2);\r\n                        padding: 8px 12px;\r\n                        border-radius: 20px;\r\n                        font-size: 14px;\r\n                    \">Processing audio with ${this.provider.toUpperCase()}...</div>\r\n                </div>\r\n                \r\n                <div style=\"padding: 24px;\">\r\n                    <div style=\"margin-bottom: 20px;\">\r\n                        <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">📧 To (optional):</label>\r\n                        <input type=\"text\" id=\"recipientName\" placeholder=\"e.g., John, Dr. Smith\" style=\"\r\n                            width: 100%;\r\n                            padding: 10px;\r\n                            border: 2px solid #e0e0e0;\r\n                            border-radius: 8px;\r\n                            font-size: 14px;\r\n                            box-sizing: border-box;\r\n                        \">\r\n                    </div>\r\n                    \r\n                    <div style=\"display: flex; gap: 16px; margin-bottom: 20px;\">\r\n                        <div style=\"flex: 1;\">\r\n                            <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">🎭 Tone:</label>\r\n                            <select id=\"emailTone\" style=\"\r\n                                width: 100%;\r\n                                padding: 10px;\r\n                                border: 2px solid #e0e0e0;\r\n                                border-radius: 8px;\r\n                                font-size: 14px;\r\n                            \">\r\n                                <option value=\"professional\">Professional</option>\r\n                                <option value=\"friendly\">Friendly</option>\r\n                                <option value=\"formal\">Formal</option>\r\n                                <option value=\"casual\">Casual</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"flex: 1;\">\r\n                            <label style=\"display: block; font-weight: 600; margin-bottom: 8px;\">📋 Type:</label>\r\n                            <select id=\"emailType\" style=\"\r\n                                width: 100%;\r\n                                padding: 10px;\r\n                                border: 2px solid #e0e0e0;\r\n                                border-radius: 8px;\r\n                                font-size: 14px;\r\n                            \">\r\n                                <option value=\"general\">General</option>\r\n                                <option value=\"request\">Request</option>\r\n                                <option value=\"follow-up\">Follow-up</option>\r\n                                <option value=\"thank-you\">Thank You</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div style=\"\r\n                    padding: 20px 24px;\r\n                    background: #f8f9fa;\r\n                    display: flex;\r\n                    gap: 12px;\r\n                    justify-content: flex-end;\r\n                \">\r\n                    <button id=\"cancelCustomization\" style=\"\r\n                        background: transparent;\r\n                        color: #666;\r\n                        border: 2px solid #ddd;\r\n                        padding: 10px 20px;\r\n                        border-radius: 20px;\r\n                        cursor: pointer;\r\n                        font-weight: 500;\r\n                    \">Cancel</button>\r\n                    <button id=\"processWithOptions\" disabled style=\"\r\n                        background: #4caf50;\r\n                        color: white;\r\n                        border: none;\r\n                        padding: 10px 20px;\r\n                        border-radius: 20px;\r\n                        cursor: pointer;\r\n                        font-weight: 500;\r\n                    \">\r\n                        <span class=\"btn-text\">✨ Insert Email</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(popup);\r\n        this.customizationPopup = popup;\r\n\r\n        popup.querySelector('#cancelCustomization').addEventListener('click', () => {\r\n            this.closeCustomizationPopup();\r\n        });\r\n\r\n        popup.querySelector('#processWithOptions').addEventListener('click', () => {\r\n            this.processWithCustomization();\r\n        });\r\n    }\r\n\r\n    async processTranscriptionAsync(audioBlob) {\r\n        console.log('🎤 Processing transcription with', this.provider);\r\n\r\n        try {\r\n            const transcriptionText = await this.processTranscription(audioBlob);\r\n            this.rawTranscription = transcriptionText;\r\n\r\n            console.log('🎤 Transcription complete:', transcriptionText);\r\n\r\n            this.updateCustomizationStatus('✅ Audio processed! Configure options and click \"Insert Email\"');\r\n\r\n            const processBtn = this.customizationPopup?.querySelector('#processWithOptions');\r\n            if (processBtn) {\r\n                processBtn.disabled = false;\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('🎤 Error processing transcription:', error);\r\n            this.updateCustomizationStatus('❌ Error processing audio. Please try again.');\r\n        }\r\n    }\r\n\r\n    async processTranscription(audioBlob) {\r\n        const formData = new FormData();\r\n        formData.append('file', audioBlob, 'recording.webm');\r\n\r\n        let url, model;\r\n\r\n        if (this.provider === 'groq') {\r\n            url = 'https://api.groq.com/openai/v1/audio/transcriptions';\r\n            model = 'whisper-large-v3';\r\n        } else {\r\n            url = 'https://api.openai.com/v1/audio/transcriptions';\r\n            model = 'whisper-1';\r\n        }\r\n\r\n        formData.append('model', model);\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: { 'Authorization': `Bearer ${this.apiKey}` },\r\n            body: formData,\r\n        });\r\n\r\n        if (response.ok) {\r\n            const result = await response.json();\r\n            return result.text;\r\n        } else {\r\n            const errorText = await response.text();\r\n            console.error('🎤 Transcription API error:', response.status, errorText);\r\n            throw new Error(`Transcription failed: ${response.status}`);\r\n        }\r\n    }\r\n\r\n    async processWithCustomization() {\r\n        console.log('🎤 Processing with customization...');\r\n\r\n        if (!this.rawTranscription) {\r\n            this.showMessage('Still processing audio, please wait...');\r\n            return;\r\n        }\r\n\r\n        const processBtn = this.customizationPopup.querySelector('#processWithOptions');\r\n        processBtn.disabled = true;\r\n        processBtn.querySelector('.btn-text').textContent = 'Processing...';\r\n\r\n        try {\r\n            const recipientName = this.customizationPopup.querySelector('#recipientName').value.trim();\r\n            const emailTone = this.customizationPopup.querySelector('#emailTone').value;\r\n            const emailType = this.customizationPopup.querySelector('#emailType').value;\r\n\r\n            const optimizedText = await this.processWithAI(\r\n                this.rawTranscription,\r\n                recipientName,\r\n                emailTone,\r\n                emailType\r\n            );\r\n\r\n            console.log('🎤 Generated email:', optimizedText);\r\n\r\n            this.insertTextIntoCompose(optimizedText);\r\n            this.closeCustomizationPopup();\r\n            this.showMessage('🎉 Email transcribed and inserted successfully!');\r\n\r\n        } catch (error) {\r\n            console.error('🎤 Error in final processing:', error);\r\n            processBtn.disabled = false;\r\n            processBtn.querySelector('.btn-text').textContent = '✨ Insert Email';\r\n            this.showMessage('Error processing email. Please try again.');\r\n        }\r\n    }\r\n\r\n    async processWithAI(transcriptionText, recipientName, tone, emailType) {\r\n        let systemPrompt = `You are an expert email writing assistant. Create a well-formatted, professional email based on the speech transcription provided.\r\n\r\nInstructions:\r\n- Correct any speech recognition errors\r\n- Format into proper email structure (greeting, body, closing)\r\n- Use a ${tone} tone throughout\r\n- This is a ${emailType} email`;\r\n\r\n        if (recipientName) {\r\n            systemPrompt += `\\n- Address the email to ${recipientName}`;\r\n        }\r\n\r\n        const requestBody = {\r\n            messages: [\r\n                { role: \"system\", content: systemPrompt },\r\n                { role: \"user\", content: `Please convert this speech transcription into a well-formatted email:\\n\\n\"${transcriptionText}\"` }\r\n            ],\r\n            temperature: 0.3,\r\n            max_tokens: 2048\r\n        };\r\n\r\n        let url;\r\n\r\n        if (this.provider === 'groq') {\r\n            url = 'https://api.groq.com/openai/v1/chat/completions';\r\n            requestBody.model = \"mixtral-8x7b-32768\";\r\n        } else {\r\n            url = 'https://api.openai.com/v1/chat/completions';\r\n            requestBody.model = \"gpt-4\";\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.apiKey}`\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        if (response.ok) {\r\n            const result = await response.json();\r\n            return result.choices[0].message.content.trim();\r\n        } else {\r\n            const errorText = await response.text();\r\n            console.error('🎤 AI API error:', response.status, errorText);\r\n            throw new Error(`AI processing failed: ${response.status}`);\r\n        }\r\n    }\r\n\r\n    insertTextIntoCompose(text) {\r\n        console.log('🎤 Inserting text into compose...');\r\n\r\n        const composeSelectors = [\r\n            '[contenteditable=\"true\"]',\r\n            '[role=\"textbox\"]',\r\n            '.Am.Al.editable',\r\n            '.editable',\r\n            '[g_editable=\"true\"]',\r\n            '.ii.gt div[contenteditable=\"true\"]'\r\n        ];\r\n\r\n        let composeBody = null;\r\n        for (const selector of composeSelectors) {\r\n            composeBody = this.currentComposeView.querySelector(selector);\r\n            if (composeBody) {\r\n                console.log('🎤 Found compose body with selector:', selector);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (composeBody) {\r\n            composeBody.focus();\r\n            composeBody.innerHTML = '';\r\n\r\n            const formattedText = text.replace(/\\n/g, '<br><br>');\r\n            composeBody.innerHTML = formattedText;\r\n\r\n            const events = ['input', 'change', 'keyup'];\r\n            events.forEach(eventType => {\r\n                const event = new Event(eventType, { bubbles: true });\r\n                composeBody.dispatchEvent(event);\r\n            });\r\n\r\n            console.log('🎤 Text inserted successfully!');\r\n        } else {\r\n            console.error('🎤 Could not find compose body to insert text');\r\n            this.showMessage('Error: Could not find compose window to insert text');\r\n        }\r\n    }\r\n\r\n    updateCustomizationStatus(message) {\r\n        if (!this.customizationPopup) return;\r\n        const statusElement = this.customizationPopup.querySelector('.processing-status');\r\n        if (statusElement) {\r\n            statusElement.textContent = message;\r\n        }\r\n    }\r\n\r\n    closeCustomizationPopup() {\r\n        if (this.customizationPopup) {\r\n            this.customizationPopup.remove();\r\n            this.customizationPopup = null;\r\n        }\r\n    }\r\n\r\n    stopRecording() {\r\n        console.log('🎤 Stopping recording...');\r\n        if (this.mediaRecorder && this.recording) {\r\n            this.mediaRecorder.stop();\r\n            this.recording = false;\r\n        }\r\n    }\r\n\r\n    showMessage(message) {\r\n        console.log('🎤 Email Transcription:', message);\r\n\r\n        const toast = document.createElement('div');\r\n        toast.textContent = message;\r\n        toast.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: #333;\r\n            color: white;\r\n            padding: 12px 20px;\r\n            border-radius: 6px;\r\n            z-index: 100002;\r\n            font-family: 'Google Sans', sans-serif;\r\n            max-width: 400px;\r\n            text-align: center;\r\n        `;\r\n        document.body.appendChild(toast);\r\n\r\n        setTimeout(() => {\r\n            toast.remove();\r\n        }, 4000);\r\n    }\r\n}\r\n\r\n// Initialize the extension\r\nconsole.log('🎤 Creating GmailEmailRecorder instance...');\r\nconst recorder = new GmailEmailRecorder();\r\n\r\n// Test button for debugging\r\nsetTimeout(() => {\r\n    const testButton = document.createElement('div');\r\n    testButton.innerHTML = '🎤';\r\n    testButton.style.cssText = `\r\n        position: fixed;\r\n        bottom: 20px;\r\n        right: 20px;\r\n        width: 50px;\r\n        height: 50px;\r\n        background: #1a73e8;\r\n        color: white;\r\n        border-radius: 50%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        z-index: 100000;\r\n        font-size: 16px;\r\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n    `;\r\n    testButton.title = 'Extension loaded! Click compose to see voice button.';\r\n    testButton.onclick = () => {\r\n        alert('🎤 Extension is working!\\n\\n1. Click compose in Gmail\\n2. Look for voice button in toolbar\\n3. Make sure API key is set in extension popup');\r\n    };\r\n    document.body.appendChild(testButton);\r\n}, 3000);"],"names":["console","log","constructor","this","recording","mediaRecorder","stream","chunks","recordingPopup","customizationPopup","currentComposeView","provider","apiKey","document","readyState","addEventListener","init","loadSettings","setTimeout","waitForGmail","result","chrome","storage","local","get","selectedProvider","groqApiKey","openaiApiKey","error","checkForCompose","foundCompose","forEach","selector","querySelectorAll","element","isComposeWindow","querySelector","addButtonToCompose","addComposeButtonListener","setInterval","lastUrl","location","href","MutationObserver","url","observe","subtree","childList","some","button","textContent","toLowerCase","includes","hasAttribute","setAttribute","composeDialog","toolbarSelectors","toolbar","sendButton","parentElement","composeBody","createElement","style","cssText","appendChild","voiceButton","className","innerHTML","concat","toUpperCase","title","async","e","preventDefault","stopPropagation","stopRecording","startRecording","showMessage","addFallbackButton","floatingButton","position","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","sampleRate","MediaRecorder","mimeType","ondataavailable","event","push","data","onstop","handleRecordingStop","bind","createRecordingPopup","start","background","popup","head","body","startTimer","recordingStartTime","Date","now","timerInterval","elapsed","Math","floor","minutes","toString","padStart","seconds","timerElement","clearInterval","remove","createCustomizationPopup","audioBlob","Blob","type","processTranscriptionAsync","updateCustomizationStatus","getTracks","track","stop","closeCustomizationPopup","processWithCustomization","_this$customizationPo","transcriptionText","processTranscription","rawTranscription","processBtn","disabled","formData","FormData","model","append","response","fetch","method","headers","ok","json","text","errorText","status","Error","recipientName","value","trim","emailTone","emailType","optimizedText","processWithAI","insertTextIntoCompose","tone","systemPrompt","requestBody","messages","role","content","temperature","max_tokens","JSON","stringify","choices","message","composeSelectors","focus","formattedText","replace","eventType","Event","bubbles","dispatchEvent","statusElement","toast","testButton","onclick","alert"],"sourceRoot":""}