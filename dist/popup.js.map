{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://@shashankvemuri/email-transcription/./src/popup.js"],"sourcesContent":["// Improved popup script with better UX and validation\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    console.log('üé§ Popup loaded');\r\n\r\n    // Elements\r\n    const groqProvider = document.getElementById('groqProvider');\r\n    const openaiProvider = document.getElementById('openaiProvider');\r\n    const groqRadio = document.getElementById('groqRadio');\r\n    const openaiRadio = document.getElementById('openaiRadio');\r\n    const groqApiKey = document.getElementById('groqApiKey');\r\n    const openaiApiKey = document.getElementById('openaiApiKey');\r\n    const saveButton = document.getElementById('saveSettings');\r\n    const status = document.getElementById('status');\r\n    const connectionStatus = document.getElementById('connectionStatus');\r\n    const groqStatus = document.getElementById('groqStatus');\r\n    const openaiStatus = document.getElementById('openaiStatus');\r\n\r\n    // Load saved settings\r\n    loadSavedSettings();\r\n\r\n    // Provider selection\r\n    groqProvider.addEventListener('click', () => selectProvider('groq'));\r\n    openaiProvider.addEventListener('click', () => selectProvider('openai'));\r\n    groqRadio.addEventListener('change', () => selectProvider('groq'));\r\n    openaiRadio.addEventListener('change', () => selectProvider('openai'));\r\n\r\n    // Real-time validation\r\n    groqApiKey.addEventListener('input', () => validateKey('groq', groqApiKey.value));\r\n    openaiApiKey.addEventListener('input', () => validateKey('openai', openaiApiKey.value));\r\n\r\n    // Save settings\r\n    saveButton.addEventListener('click', saveSettings);\r\n\r\n    // Enter key support\r\n    [groqApiKey, openaiApiKey].forEach(input => {\r\n        input.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                saveSettings();\r\n            }\r\n        });\r\n    });\r\n\r\n    function selectProvider(provider) {\r\n        console.log('üé§ Selected provider:', provider);\r\n\r\n        // Update radio buttons\r\n        groqRadio.checked = provider === 'groq';\r\n        openaiRadio.checked = provider === 'openai';\r\n\r\n        // Update visual selection\r\n        groqProvider.classList.toggle('selected', provider === 'groq');\r\n        openaiProvider.classList.toggle('selected', provider === 'openai');\r\n\r\n        // Save provider preference immediately\r\n        chrome.storage.local.set({ selectedProvider: provider });\r\n\r\n        // Update connection status\r\n        updateConnectionStatus();\r\n    }\r\n\r\n    function validateKey(provider, key) {\r\n        const statusElement = provider === 'groq' ? groqStatus : openaiStatus;\r\n\r\n        if (!key) {\r\n            statusElement.textContent = '';\r\n            return false;\r\n        }\r\n\r\n        // Check format\r\n        const validFormat = provider === 'groq' ? key.startsWith('gsk_') : key.startsWith('sk-');\r\n        const validLength = key.length > 20;\r\n\r\n        if (!validFormat) {\r\n            statusElement.textContent = '‚ùå';\r\n            statusElement.title = `${provider === 'groq' ? 'Groq' : 'OpenAI'} keys should start with \"${provider === 'groq' ? 'gsk_' : 'sk_'}\"`;\r\n            return false;\r\n        }\r\n\r\n        if (!validLength) {\r\n            statusElement.textContent = '‚ö†Ô∏è';\r\n            statusElement.title = 'Key seems too short';\r\n            return false;\r\n        }\r\n\r\n        statusElement.textContent = '‚úÖ';\r\n        statusElement.title = 'Valid format';\r\n        return true;\r\n    }\r\n\r\n    function updateConnectionStatus() {\r\n        const selectedProvider = groqRadio.checked ? 'groq' : 'openai';\r\n        const key = selectedProvider === 'groq' ? groqApiKey.value : openaiApiKey.value;\r\n\r\n        if (key && validateKey(selectedProvider, key)) {\r\n            connectionStatus.className = 'status-indicator connected';\r\n            connectionStatus.title = 'Ready to transcribe';\r\n        } else {\r\n            connectionStatus.className = 'status-indicator disconnected';\r\n            connectionStatus.title = 'API key required';\r\n        }\r\n    }\r\n\r\n    async function loadSavedSettings() {\r\n        try {\r\n            const result = await chrome.storage.local.get([\r\n                'groqApiKey',\r\n                'openaiApiKey',\r\n                'selectedProvider'\r\n            ]);\r\n\r\n            console.log('üé§ Loaded settings:', {\r\n                ...result,\r\n                groqApiKey: result.groqApiKey ? '[HIDDEN]' : 'none',\r\n                openaiApiKey: result.openaiApiKey ? '[HIDDEN]' : 'none'\r\n            });\r\n\r\n            // Load API keys\r\n            if (result.groqApiKey) {\r\n                groqApiKey.value = result.groqApiKey;\r\n                validateKey('groq', result.groqApiKey);\r\n            }\r\n            if (result.openaiApiKey) {\r\n                openaiApiKey.value = result.openaiApiKey;\r\n                validateKey('openai', result.openaiApiKey);\r\n            }\r\n\r\n            // Load provider selection (default to Groq)\r\n            const provider = result.selectedProvider || 'groq';\r\n            selectProvider(provider);\r\n\r\n            // Show ready status if we have a valid setup\r\n            const selectedProvider = groqRadio.checked ? 'groq' : 'openai';\r\n            const selectedKey = selectedProvider === 'groq' ? result.groqApiKey : result.openaiApiKey;\r\n\r\n            if (selectedKey && validateKey(selectedProvider, selectedKey)) {\r\n                showStatus('‚úÖ Ready to transcribe! Go to Gmail and click compose.', 'success');\r\n                saveButton.textContent = '‚úÖ Ready to Use';\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('üé§ Error loading settings:', error);\r\n            showStatus('Error loading settings', 'error');\r\n        }\r\n    }\r\n\r\n    async function saveSettings() {\r\n        console.log('üé§ Saving settings...');\r\n\r\n        const selectedProvider = groqRadio.checked ? 'groq' : 'openai';\r\n        const groqKey = groqApiKey.value.trim();\r\n        const openaiKey = openaiApiKey.value.trim();\r\n\r\n        // Validate based on selected provider\r\n        if (selectedProvider === 'groq' && !groqKey) {\r\n            showStatus('Please enter your Groq API key', 'error');\r\n            groqApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        if (selectedProvider === 'openai' && !openaiKey) {\r\n            showStatus('Please enter your OpenAI API key', 'error');\r\n            openaiApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        // Validate key format\r\n        const currentKey = selectedProvider === 'groq' ? groqKey : openaiKey;\r\n        if (!validateKey(selectedProvider, currentKey)) {\r\n            showStatus(`Invalid ${selectedProvider === 'groq' ? 'Groq' : 'OpenAI'} API key format`, 'error');\r\n            const input = selectedProvider === 'groq' ? groqApiKey : openaiApiKey;\r\n            input.focus();\r\n            return;\r\n        }\r\n\r\n        // Show loading state\r\n        saveButton.disabled = true;\r\n        saveButton.className = 'save-button loading';\r\n        showStatus('Saving settings...', 'info');\r\n\r\n        try {\r\n            // Save to chrome.storage.local (consistent with content script)\r\n            await chrome.storage.local.set({\r\n                selectedProvider: selectedProvider,\r\n                groqApiKey: groqKey,\r\n                openaiApiKey: openaiKey\r\n            });\r\n\r\n            console.log('üé§ Settings saved successfully');\r\n\r\n            // Update UI to show success\r\n            saveButton.textContent = '‚úÖ Saved! Ready to Use';\r\n            saveButton.className = 'save-button';\r\n            updateConnectionStatus();\r\n\r\n            showStatus('üéâ Setup complete! Go to Gmail and click compose to start transcribing.', 'success');\r\n\r\n            // Auto-close popup after success (but give time to read message)\r\n            setTimeout(() => {\r\n                window.close();\r\n            }, 2000);\r\n\r\n        } catch (error) {\r\n            console.error('üé§ Error saving settings:', error);\r\n            showStatus('Error saving settings: ' + error.message, 'error');\r\n        } finally {\r\n            saveButton.disabled = false;\r\n            if (saveButton.className.includes('loading')) {\r\n                saveButton.className = 'save-button';\r\n                saveButton.textContent = 'Save & Activate';\r\n            }\r\n        }\r\n    }\r\n\r\n    function showStatus(message, type) {\r\n        status.textContent = message;\r\n        status.className = `status ${type}`;\r\n        status.style.display = 'block';\r\n\r\n        // Auto-hide after 5 seconds for error messages\r\n        if (type === 'error') {\r\n            setTimeout(() => {\r\n                status.style.display = 'none';\r\n            }, 5000);\r\n        }\r\n    }\r\n\r\n    // Real-time connection status updates\r\n    setInterval(updateConnectionStatus, 1000);\r\n});"],"names":["document","addEventListener","console","log","groqProvider","getElementById","openaiProvider","groqRadio","openaiRadio","groqApiKey","openaiApiKey","saveButton","status","connectionStatus","groqStatus","openaiStatus","selectProvider","provider","checked","classList","toggle","chrome","storage","local","set","selectedProvider","updateConnectionStatus","validateKey","key","statusElement","textContent","validFormat","startsWith","validLength","length","title","concat","value","className","async","saveSettings","groqKey","trim","openaiKey","showStatus","focus","disabled","setTimeout","window","close","error","message","includes","type","style","display","result","get","_objectSpread","selectedKey","loadSavedSettings","forEach","input","e","setInterval"],"sourceRoot":""}