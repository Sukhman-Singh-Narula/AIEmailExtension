{"version":3,"file":"popup.js","mappings":"89BACAA,SAASC,iBAAiB,oBAAoB,WAC1CC,QAAQC,IAAI,mBAGZ,MAAMC,EAAeJ,SAASK,eAAe,gBACvCC,EAAiBN,SAASK,eAAe,kBACzCE,EAAYP,SAASK,eAAe,aACpCG,EAAcR,SAASK,eAAe,eACtCI,EAAaT,SAASK,eAAe,cACrCK,EAAeV,SAASK,eAAe,gBACvCM,EAAaX,SAASK,eAAe,gBACrCO,EAASZ,SAASK,eAAe,UAuBvC,SAASQ,EAAeC,GACpBZ,QAAQC,IAAI,wBAAyBW,GAGrCP,EAAUQ,QAAuB,SAAbD,EACpBN,EAAYO,QAAuB,WAAbD,EAGtBV,EAAaY,UAAUC,OAAO,WAAyB,SAAbH,GAC1CR,EAAeU,UAAUC,OAAO,WAAyB,WAAbH,GAG5CI,OAAOC,QAAQC,MAAMC,IAAI,CAAEC,iBAAkBR,GACjD,CA8BAS,eAAeC,IACXtB,QAAQC,IAAI,yBAEZ,MAAMmB,EAAmBf,EAAUQ,QAAU,OAAS,SAChDU,EAAUhB,EAAWiB,MAAMC,OAC3BC,EAAYlB,EAAagB,MAAMC,OAGrC,GAAyB,SAArBL,IAAgCG,EAGhC,OAFAI,EAAW,iCAAkC,cAC7CpB,EAAWqB,QAIf,GAAyB,WAArBR,IAAkCM,EAGlC,OAFAC,EAAW,mCAAoC,cAC/CnB,EAAaoB,QAKjB,GAAyB,SAArBR,IAAgCG,EAAQM,WAAW,QAGnD,OAFAF,EAAW,yCAA0C,cACrDpB,EAAWqB,QAIf,GAAyB,WAArBR,IAAkCM,EAAUG,WAAW,OAGvD,OAFAF,EAAW,0CAA2C,cACtDnB,EAAaoB,QAIjBnB,EAAWqB,UAAW,EACtBrB,EAAWsB,YAAc,YAEzB,UAEUf,OAAOC,QAAQC,MAAMC,IAAI,CAC3BC,iBAAkBA,EAClBb,WAAYgB,EACZf,aAAckB,IAGlB1B,QAAQC,IAAI,kCACZ0B,EAAW,iCAAkC,WAG7CK,YAAW,KACPC,OAAOC,UACR,KAEP,CAAE,MAAOC,GACLnC,QAAQmC,MAAM,4BAA6BA,GAC3CR,EAAW,0BAA4BQ,EAAMC,QAAS,QAC1D,CAAE,QACE3B,EAAWqB,UAAW,EACtBrB,EAAWsB,YAAc,eAC7B,CACJ,CAEA,SAASJ,EAAWS,EAASC,GACzB3B,EAAOqB,YAAcK,EACrB1B,EAAO4B,UAAY,UAAHC,OAAaF,GAC7B3B,EAAO8B,MAAMC,QAAU,QAGV,UAATJ,GACAL,YAAW,KACPtB,EAAO8B,MAAMC,QAAU,SACxB,IAEX,EApGApB,iBACI,IACI,MAAMqB,QAAe1B,OAAOC,QAAQC,MAAMyB,IAAI,CAC1C,aACA,eACA,qBAGJ3C,QAAQC,IAAI,sBAAqB2C,EAAAA,EAAA,GAAOF,GAAM,IAAEnC,WAAYmC,EAAOnC,WAAa,WAAa,OAAQC,aAAckC,EAAOlC,aAAe,WAAa,UAGlJkC,EAAOnC,aACPA,EAAWiB,MAAQkB,EAAOnC,YAE1BmC,EAAOlC,eACPA,EAAagB,MAAQkB,EAAOlC,cAKhCG,EADiB+B,EAAOtB,kBAAoB,OAGhD,CAAE,MAAOe,GACLnC,QAAQmC,MAAM,6BAA8BA,GAC5CR,EAAW,yBAA0B,QACzC,CACJ,CA7DAkB,GAGA3C,EAAaH,iBAAiB,SAAS,IAAMY,EAAe,UAC5DP,EAAeL,iBAAiB,SAAS,IAAMY,EAAe,YAC9DN,EAAUN,iBAAiB,UAAU,IAAMY,EAAe,UAC1DL,EAAYP,iBAAiB,UAAU,IAAMY,EAAe,YAG5DF,EAAWV,iBAAiB,QAASuB,GAGrC,CAACf,EAAYC,GAAcsC,SAAQC,IAC/BA,EAAMhD,iBAAiB,YAAaiD,IAClB,UAAVA,EAAEC,KACF3B,SAyHhB,G","sources":["webpack://@shashankvemuri/email-transcription/./src/popup.js"],"sourcesContent":["// src/popup.js - Standalone popup script (no React)\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    console.log('ðŸŽ¤ Popup loaded');\r\n\r\n    // Elements\r\n    const groqProvider = document.getElementById('groqProvider');\r\n    const openaiProvider = document.getElementById('openaiProvider');\r\n    const groqRadio = document.getElementById('groqRadio');\r\n    const openaiRadio = document.getElementById('openaiRadio');\r\n    const groqApiKey = document.getElementById('groqApiKey');\r\n    const openaiApiKey = document.getElementById('openaiApiKey');\r\n    const saveButton = document.getElementById('saveSettings');\r\n    const status = document.getElementById('status');\r\n\r\n    // Load saved settings\r\n    loadSavedSettings();\r\n\r\n    // Provider selection\r\n    groqProvider.addEventListener('click', () => selectProvider('groq'));\r\n    openaiProvider.addEventListener('click', () => selectProvider('openai'));\r\n    groqRadio.addEventListener('change', () => selectProvider('groq'));\r\n    openaiRadio.addEventListener('change', () => selectProvider('openai'));\r\n\r\n    // Save settings\r\n    saveButton.addEventListener('click', saveSettings);\r\n\r\n    // Enter key support\r\n    [groqApiKey, openaiApiKey].forEach(input => {\r\n        input.addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                saveSettings();\r\n            }\r\n        });\r\n    });\r\n\r\n    function selectProvider(provider) {\r\n        console.log('ðŸŽ¤ Selected provider:', provider);\r\n\r\n        // Update radio buttons\r\n        groqRadio.checked = provider === 'groq';\r\n        openaiRadio.checked = provider === 'openai';\r\n\r\n        // Update visual selection\r\n        groqProvider.classList.toggle('selected', provider === 'groq');\r\n        openaiProvider.classList.toggle('selected', provider === 'openai');\r\n\r\n        // Save provider preference\r\n        chrome.storage.local.set({ selectedProvider: provider });\r\n    }\r\n\r\n    async function loadSavedSettings() {\r\n        try {\r\n            const result = await chrome.storage.local.get([\r\n                'groqApiKey',\r\n                'openaiApiKey',\r\n                'selectedProvider'\r\n            ]);\r\n\r\n            console.log('ðŸŽ¤ Loaded settings:', { ...result, groqApiKey: result.groqApiKey ? '[HIDDEN]' : 'none', openaiApiKey: result.openaiApiKey ? '[HIDDEN]' : 'none' });\r\n\r\n            // Load API keys\r\n            if (result.groqApiKey) {\r\n                groqApiKey.value = result.groqApiKey;\r\n            }\r\n            if (result.openaiApiKey) {\r\n                openaiApiKey.value = result.openaiApiKey;\r\n            }\r\n\r\n            // Load provider selection (default to Groq)\r\n            const provider = result.selectedProvider || 'groq';\r\n            selectProvider(provider);\r\n\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error loading settings:', error);\r\n            showStatus('Error loading settings', 'error');\r\n        }\r\n    }\r\n\r\n    async function saveSettings() {\r\n        console.log('ðŸŽ¤ Saving settings...');\r\n\r\n        const selectedProvider = groqRadio.checked ? 'groq' : 'openai';\r\n        const groqKey = groqApiKey.value.trim();\r\n        const openaiKey = openaiApiKey.value.trim();\r\n\r\n        // Validate based on selected provider\r\n        if (selectedProvider === 'groq' && !groqKey) {\r\n            showStatus('Please enter your Groq API key', 'error');\r\n            groqApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        if (selectedProvider === 'openai' && !openaiKey) {\r\n            showStatus('Please enter your OpenAI API key', 'error');\r\n            openaiApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        // Validate key format\r\n        if (selectedProvider === 'groq' && !groqKey.startsWith('gsk_')) {\r\n            showStatus('Groq API keys should start with \"gsk_\"', 'error');\r\n            groqApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        if (selectedProvider === 'openai' && !openaiKey.startsWith('sk-')) {\r\n            showStatus('OpenAI API keys should start with \"sk-\"', 'error');\r\n            openaiApiKey.focus();\r\n            return;\r\n        }\r\n\r\n        saveButton.disabled = true;\r\n        saveButton.textContent = 'Saving...';\r\n\r\n        try {\r\n            // Save to storage\r\n            await chrome.storage.local.set({\r\n                selectedProvider: selectedProvider,\r\n                groqApiKey: groqKey,\r\n                openaiApiKey: openaiKey\r\n            });\r\n\r\n            console.log('ðŸŽ¤ Settings saved successfully');\r\n            showStatus('âœ… Settings saved successfully!', 'success');\r\n\r\n            // Auto-close popup after success\r\n            setTimeout(() => {\r\n                window.close();\r\n            }, 1500);\r\n\r\n        } catch (error) {\r\n            console.error('ðŸŽ¤ Error saving settings:', error);\r\n            showStatus('Error saving settings: ' + error.message, 'error');\r\n        } finally {\r\n            saveButton.disabled = false;\r\n            saveButton.textContent = 'Save Settings';\r\n        }\r\n    }\r\n\r\n    function showStatus(message, type) {\r\n        status.textContent = message;\r\n        status.className = `status ${type}`;\r\n        status.style.display = 'block';\r\n\r\n        // Auto-hide after 5 seconds for error messages\r\n        if (type === 'error') {\r\n            setTimeout(() => {\r\n                status.style.display = 'none';\r\n            }, 5000);\r\n        }\r\n    }\r\n});"],"names":["document","addEventListener","console","log","groqProvider","getElementById","openaiProvider","groqRadio","openaiRadio","groqApiKey","openaiApiKey","saveButton","status","selectProvider","provider","checked","classList","toggle","chrome","storage","local","set","selectedProvider","async","saveSettings","groqKey","value","trim","openaiKey","showStatus","focus","startsWith","disabled","textContent","setTimeout","window","close","error","message","type","className","concat","style","display","result","get","_objectSpread","loadSavedSettings","forEach","input","e","key"],"sourceRoot":""}